// Code generated by protoc-gen-go. DO NOT EDIT.
// source: atomix/raft/protocol.proto

package raft

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResponseStatus int32

const (
	ResponseStatus_OK    ResponseStatus = 0
	ResponseStatus_ERROR ResponseStatus = 1
)

var ResponseStatus_name = map[int32]string{
	0: "OK",
	1: "ERROR",
}

var ResponseStatus_value = map[string]int32{
	"OK":    0,
	"ERROR": 1,
}

func (x ResponseStatus) String() string {
	return proto.EnumName(ResponseStatus_name, int32(x))
}

func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{0}
}

type RaftError int32

const (
	RaftError_NO_LEADER            RaftError = 0
	RaftError_QUERY_FAILURE        RaftError = 1
	RaftError_COMMAND_FAILURE      RaftError = 2
	RaftError_APPLICATION_ERROR    RaftError = 3
	RaftError_ILLEGAL_MEMBER_STATE RaftError = 4
	RaftError_UNKNOWN_CLIENT       RaftError = 5
	RaftError_UNKNOWN_SESSION      RaftError = 6
	RaftError_UNKNOWN_SERVICE      RaftError = 7
	RaftError_CLOSED_SESSION       RaftError = 8
	RaftError_PROTOCOL_ERROR       RaftError = 9
	RaftError_CONFIGURATION_ERROR  RaftError = 10
	RaftError_UNAVAILABLE          RaftError = 11
)

var RaftError_name = map[int32]string{
	0:  "NO_LEADER",
	1:  "QUERY_FAILURE",
	2:  "COMMAND_FAILURE",
	3:  "APPLICATION_ERROR",
	4:  "ILLEGAL_MEMBER_STATE",
	5:  "UNKNOWN_CLIENT",
	6:  "UNKNOWN_SESSION",
	7:  "UNKNOWN_SERVICE",
	8:  "CLOSED_SESSION",
	9:  "PROTOCOL_ERROR",
	10: "CONFIGURATION_ERROR",
	11: "UNAVAILABLE",
}

var RaftError_value = map[string]int32{
	"NO_LEADER":            0,
	"QUERY_FAILURE":        1,
	"COMMAND_FAILURE":      2,
	"APPLICATION_ERROR":    3,
	"ILLEGAL_MEMBER_STATE": 4,
	"UNKNOWN_CLIENT":       5,
	"UNKNOWN_SESSION":      6,
	"UNKNOWN_SERVICE":      7,
	"CLOSED_SESSION":       8,
	"PROTOCOL_ERROR":       9,
	"CONFIGURATION_ERROR":  10,
	"UNAVAILABLE":          11,
}

func (x RaftError) String() string {
	return proto.EnumName(RaftError_name, int32(x))
}

func (RaftError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{1}
}

type JoinRequest struct {
	Member               *RaftMember `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *JoinRequest) Reset()         { *m = JoinRequest{} }
func (m *JoinRequest) String() string { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()    {}
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{0}
}

func (m *JoinRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinRequest.Unmarshal(m, b)
}
func (m *JoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinRequest.Marshal(b, m, deterministic)
}
func (m *JoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRequest.Merge(m, src)
}
func (m *JoinRequest) XXX_Size() int {
	return xxx_messageInfo_JoinRequest.Size(m)
}
func (m *JoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRequest proto.InternalMessageInfo

func (m *JoinRequest) GetMember() *RaftMember {
	if m != nil {
		return m.Member
	}
	return nil
}

type JoinResponse struct {
	Status               ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=atomix.raft.ResponseStatus" json:"status,omitempty"`
	Error                RaftError      `protobuf:"varint,2,opt,name=error,proto3,enum=atomix.raft.RaftError" json:"error,omitempty"`
	Index                int64          `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Term                 int64          `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Timestamp            int64          `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Members              []*RaftMember  `protobuf:"bytes,6,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *JoinResponse) Reset()         { *m = JoinResponse{} }
func (m *JoinResponse) String() string { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()    {}
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{1}
}

func (m *JoinResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinResponse.Unmarshal(m, b)
}
func (m *JoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinResponse.Marshal(b, m, deterministic)
}
func (m *JoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinResponse.Merge(m, src)
}
func (m *JoinResponse) XXX_Size() int {
	return xxx_messageInfo_JoinResponse.Size(m)
}
func (m *JoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinResponse proto.InternalMessageInfo

func (m *JoinResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_OK
}

func (m *JoinResponse) GetError() RaftError {
	if m != nil {
		return m.Error
	}
	return RaftError_NO_LEADER
}

func (m *JoinResponse) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *JoinResponse) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *JoinResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *JoinResponse) GetMembers() []*RaftMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type ConfigureRequest struct {
	Term                 int64         `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Leader               string        `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	Index                int64         `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Timestamp            int64         `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Members              []*RaftMember `protobuf:"bytes,5,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ConfigureRequest) Reset()         { *m = ConfigureRequest{} }
func (m *ConfigureRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigureRequest) ProtoMessage()    {}
func (*ConfigureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{2}
}

func (m *ConfigureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigureRequest.Unmarshal(m, b)
}
func (m *ConfigureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigureRequest.Marshal(b, m, deterministic)
}
func (m *ConfigureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureRequest.Merge(m, src)
}
func (m *ConfigureRequest) XXX_Size() int {
	return xxx_messageInfo_ConfigureRequest.Size(m)
}
func (m *ConfigureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureRequest proto.InternalMessageInfo

func (m *ConfigureRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *ConfigureRequest) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

func (m *ConfigureRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ConfigureRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ConfigureRequest) GetMembers() []*RaftMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type ConfigureResponse struct {
	Status               ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=atomix.raft.ResponseStatus" json:"status,omitempty"`
	Error                RaftError      `protobuf:"varint,2,opt,name=error,proto3,enum=atomix.raft.RaftError" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ConfigureResponse) Reset()         { *m = ConfigureResponse{} }
func (m *ConfigureResponse) String() string { return proto.CompactTextString(m) }
func (*ConfigureResponse) ProtoMessage()    {}
func (*ConfigureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{3}
}

func (m *ConfigureResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigureResponse.Unmarshal(m, b)
}
func (m *ConfigureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigureResponse.Marshal(b, m, deterministic)
}
func (m *ConfigureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureResponse.Merge(m, src)
}
func (m *ConfigureResponse) XXX_Size() int {
	return xxx_messageInfo_ConfigureResponse.Size(m)
}
func (m *ConfigureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureResponse proto.InternalMessageInfo

func (m *ConfigureResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_OK
}

func (m *ConfigureResponse) GetError() RaftError {
	if m != nil {
		return m.Error
	}
	return RaftError_NO_LEADER
}

type ReconfigureRequest struct {
	Member               *RaftMember `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	Index                int64       `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Term                 int64       `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReconfigureRequest) Reset()         { *m = ReconfigureRequest{} }
func (m *ReconfigureRequest) String() string { return proto.CompactTextString(m) }
func (*ReconfigureRequest) ProtoMessage()    {}
func (*ReconfigureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{4}
}

func (m *ReconfigureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReconfigureRequest.Unmarshal(m, b)
}
func (m *ReconfigureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReconfigureRequest.Marshal(b, m, deterministic)
}
func (m *ReconfigureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReconfigureRequest.Merge(m, src)
}
func (m *ReconfigureRequest) XXX_Size() int {
	return xxx_messageInfo_ReconfigureRequest.Size(m)
}
func (m *ReconfigureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReconfigureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReconfigureRequest proto.InternalMessageInfo

func (m *ReconfigureRequest) GetMember() *RaftMember {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *ReconfigureRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ReconfigureRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

type ReconfigureResponse struct {
	Status               ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=atomix.raft.ResponseStatus" json:"status,omitempty"`
	Error                RaftError      `protobuf:"varint,2,opt,name=error,proto3,enum=atomix.raft.RaftError" json:"error,omitempty"`
	Index                int64          `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Term                 int64          `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Timestamp            int64          `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Members              []*RaftMember  `protobuf:"bytes,6,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReconfigureResponse) Reset()         { *m = ReconfigureResponse{} }
func (m *ReconfigureResponse) String() string { return proto.CompactTextString(m) }
func (*ReconfigureResponse) ProtoMessage()    {}
func (*ReconfigureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{5}
}

func (m *ReconfigureResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReconfigureResponse.Unmarshal(m, b)
}
func (m *ReconfigureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReconfigureResponse.Marshal(b, m, deterministic)
}
func (m *ReconfigureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReconfigureResponse.Merge(m, src)
}
func (m *ReconfigureResponse) XXX_Size() int {
	return xxx_messageInfo_ReconfigureResponse.Size(m)
}
func (m *ReconfigureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReconfigureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReconfigureResponse proto.InternalMessageInfo

func (m *ReconfigureResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_OK
}

func (m *ReconfigureResponse) GetError() RaftError {
	if m != nil {
		return m.Error
	}
	return RaftError_NO_LEADER
}

func (m *ReconfigureResponse) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ReconfigureResponse) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *ReconfigureResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ReconfigureResponse) GetMembers() []*RaftMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type LeaveRequest struct {
	Member               *RaftMember `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LeaveRequest) Reset()         { *m = LeaveRequest{} }
func (m *LeaveRequest) String() string { return proto.CompactTextString(m) }
func (*LeaveRequest) ProtoMessage()    {}
func (*LeaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{6}
}

func (m *LeaveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaveRequest.Unmarshal(m, b)
}
func (m *LeaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaveRequest.Marshal(b, m, deterministic)
}
func (m *LeaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveRequest.Merge(m, src)
}
func (m *LeaveRequest) XXX_Size() int {
	return xxx_messageInfo_LeaveRequest.Size(m)
}
func (m *LeaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveRequest proto.InternalMessageInfo

func (m *LeaveRequest) GetMember() *RaftMember {
	if m != nil {
		return m.Member
	}
	return nil
}

type LeaveResponse struct {
	Status               ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=atomix.raft.ResponseStatus" json:"status,omitempty"`
	Error                RaftError      `protobuf:"varint,2,opt,name=error,proto3,enum=atomix.raft.RaftError" json:"error,omitempty"`
	Index                int64          `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Term                 int64          `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Timestamp            int64          `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Members              []*RaftMember  `protobuf:"bytes,6,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *LeaveResponse) Reset()         { *m = LeaveResponse{} }
func (m *LeaveResponse) String() string { return proto.CompactTextString(m) }
func (*LeaveResponse) ProtoMessage()    {}
func (*LeaveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{7}
}

func (m *LeaveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaveResponse.Unmarshal(m, b)
}
func (m *LeaveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaveResponse.Marshal(b, m, deterministic)
}
func (m *LeaveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveResponse.Merge(m, src)
}
func (m *LeaveResponse) XXX_Size() int {
	return xxx_messageInfo_LeaveResponse.Size(m)
}
func (m *LeaveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveResponse proto.InternalMessageInfo

func (m *LeaveResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_OK
}

func (m *LeaveResponse) GetError() RaftError {
	if m != nil {
		return m.Error
	}
	return RaftError_NO_LEADER
}

func (m *LeaveResponse) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LeaveResponse) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LeaveResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *LeaveResponse) GetMembers() []*RaftMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type PollRequest struct {
	Term                 int64    `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Candidate            string   `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate,omitempty"`
	LastLogIndex         int64    `protobuf:"varint,3,opt,name=last_log_index,json=lastLogIndex,proto3" json:"last_log_index,omitempty"`
	LastLogTerm          int64    `protobuf:"varint,4,opt,name=last_log_term,json=lastLogTerm,proto3" json:"last_log_term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollRequest) Reset()         { *m = PollRequest{} }
func (m *PollRequest) String() string { return proto.CompactTextString(m) }
func (*PollRequest) ProtoMessage()    {}
func (*PollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{8}
}

func (m *PollRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollRequest.Unmarshal(m, b)
}
func (m *PollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollRequest.Marshal(b, m, deterministic)
}
func (m *PollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollRequest.Merge(m, src)
}
func (m *PollRequest) XXX_Size() int {
	return xxx_messageInfo_PollRequest.Size(m)
}
func (m *PollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollRequest proto.InternalMessageInfo

func (m *PollRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *PollRequest) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

func (m *PollRequest) GetLastLogIndex() int64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *PollRequest) GetLastLogTerm() int64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type PollResponse struct {
	Status               ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=atomix.raft.ResponseStatus" json:"status,omitempty"`
	Error                RaftError      `protobuf:"varint,2,opt,name=error,proto3,enum=atomix.raft.RaftError" json:"error,omitempty"`
	Term                 int64          `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	Accepted             bool           `protobuf:"varint,4,opt,name=accepted,proto3" json:"accepted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PollResponse) Reset()         { *m = PollResponse{} }
func (m *PollResponse) String() string { return proto.CompactTextString(m) }
func (*PollResponse) ProtoMessage()    {}
func (*PollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{9}
}

func (m *PollResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollResponse.Unmarshal(m, b)
}
func (m *PollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollResponse.Marshal(b, m, deterministic)
}
func (m *PollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollResponse.Merge(m, src)
}
func (m *PollResponse) XXX_Size() int {
	return xxx_messageInfo_PollResponse.Size(m)
}
func (m *PollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollResponse proto.InternalMessageInfo

func (m *PollResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_OK
}

func (m *PollResponse) GetError() RaftError {
	if m != nil {
		return m.Error
	}
	return RaftError_NO_LEADER
}

func (m *PollResponse) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *PollResponse) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

type VoteRequest struct {
	Term                 int64    `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Candidate            string   `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate,omitempty"`
	LastLogIndex         int64    `protobuf:"varint,3,opt,name=last_log_index,json=lastLogIndex,proto3" json:"last_log_index,omitempty"`
	LastLogTerm          int64    `protobuf:"varint,4,opt,name=last_log_term,json=lastLogTerm,proto3" json:"last_log_term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteRequest) Reset()         { *m = VoteRequest{} }
func (m *VoteRequest) String() string { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()    {}
func (*VoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{10}
}

func (m *VoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteRequest.Unmarshal(m, b)
}
func (m *VoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteRequest.Marshal(b, m, deterministic)
}
func (m *VoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteRequest.Merge(m, src)
}
func (m *VoteRequest) XXX_Size() int {
	return xxx_messageInfo_VoteRequest.Size(m)
}
func (m *VoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VoteRequest proto.InternalMessageInfo

func (m *VoteRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *VoteRequest) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

func (m *VoteRequest) GetLastLogIndex() int64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *VoteRequest) GetLastLogTerm() int64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type VoteResponse struct {
	Status               ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=atomix.raft.ResponseStatus" json:"status,omitempty"`
	Error                RaftError      `protobuf:"varint,2,opt,name=error,proto3,enum=atomix.raft.RaftError" json:"error,omitempty"`
	Term                 int64          `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	Voted                bool           `protobuf:"varint,4,opt,name=voted,proto3" json:"voted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VoteResponse) Reset()         { *m = VoteResponse{} }
func (m *VoteResponse) String() string { return proto.CompactTextString(m) }
func (*VoteResponse) ProtoMessage()    {}
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{11}
}

func (m *VoteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteResponse.Unmarshal(m, b)
}
func (m *VoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteResponse.Marshal(b, m, deterministic)
}
func (m *VoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteResponse.Merge(m, src)
}
func (m *VoteResponse) XXX_Size() int {
	return xxx_messageInfo_VoteResponse.Size(m)
}
func (m *VoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VoteResponse proto.InternalMessageInfo

func (m *VoteResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_OK
}

func (m *VoteResponse) GetError() RaftError {
	if m != nil {
		return m.Error
	}
	return RaftError_NO_LEADER
}

func (m *VoteResponse) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *VoteResponse) GetVoted() bool {
	if m != nil {
		return m.Voted
	}
	return false
}

type TransferRequest struct {
	MemberId             string   `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferRequest) Reset()         { *m = TransferRequest{} }
func (m *TransferRequest) String() string { return proto.CompactTextString(m) }
func (*TransferRequest) ProtoMessage()    {}
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{12}
}

func (m *TransferRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferRequest.Unmarshal(m, b)
}
func (m *TransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferRequest.Marshal(b, m, deterministic)
}
func (m *TransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRequest.Merge(m, src)
}
func (m *TransferRequest) XXX_Size() int {
	return xxx_messageInfo_TransferRequest.Size(m)
}
func (m *TransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRequest proto.InternalMessageInfo

func (m *TransferRequest) GetMemberId() string {
	if m != nil {
		return m.MemberId
	}
	return ""
}

type TransferResponse struct {
	Status               ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=atomix.raft.ResponseStatus" json:"status,omitempty"`
	Error                RaftError      `protobuf:"varint,2,opt,name=error,proto3,enum=atomix.raft.RaftError" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TransferResponse) Reset()         { *m = TransferResponse{} }
func (m *TransferResponse) String() string { return proto.CompactTextString(m) }
func (*TransferResponse) ProtoMessage()    {}
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{13}
}

func (m *TransferResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferResponse.Unmarshal(m, b)
}
func (m *TransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferResponse.Marshal(b, m, deterministic)
}
func (m *TransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferResponse.Merge(m, src)
}
func (m *TransferResponse) XXX_Size() int {
	return xxx_messageInfo_TransferResponse.Size(m)
}
func (m *TransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferResponse proto.InternalMessageInfo

func (m *TransferResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_OK
}

func (m *TransferResponse) GetError() RaftError {
	if m != nil {
		return m.Error
	}
	return RaftError_NO_LEADER
}

type AppendRequest struct {
	Term                 int64           `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Leader               string          `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	PrevLogIndex         int64           `protobuf:"varint,3,opt,name=prev_log_index,json=prevLogIndex,proto3" json:"prev_log_index,omitempty"`
	PrevLogTerm          int64           `protobuf:"varint,4,opt,name=prev_log_term,json=prevLogTerm,proto3" json:"prev_log_term,omitempty"`
	Entries              []*RaftLogEntry `protobuf:"bytes,5,rep,name=entries,proto3" json:"entries,omitempty"`
	CommitIndex          int64           `protobuf:"varint,6,opt,name=commit_index,json=commitIndex,proto3" json:"commit_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AppendRequest) Reset()         { *m = AppendRequest{} }
func (m *AppendRequest) String() string { return proto.CompactTextString(m) }
func (*AppendRequest) ProtoMessage()    {}
func (*AppendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{14}
}

func (m *AppendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendRequest.Unmarshal(m, b)
}
func (m *AppendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendRequest.Marshal(b, m, deterministic)
}
func (m *AppendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendRequest.Merge(m, src)
}
func (m *AppendRequest) XXX_Size() int {
	return xxx_messageInfo_AppendRequest.Size(m)
}
func (m *AppendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppendRequest proto.InternalMessageInfo

func (m *AppendRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendRequest) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

func (m *AppendRequest) GetPrevLogIndex() int64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendRequest) GetPrevLogTerm() int64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendRequest) GetEntries() []*RaftLogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendRequest) GetCommitIndex() int64 {
	if m != nil {
		return m.CommitIndex
	}
	return 0
}

type AppendResponse struct {
	Status               ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=atomix.raft.ResponseStatus" json:"status,omitempty"`
	Error                RaftError      `protobuf:"varint,2,opt,name=error,proto3,enum=atomix.raft.RaftError" json:"error,omitempty"`
	Term                 int64          `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	Succeeded            bool           `protobuf:"varint,4,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	LastLogIndex         int64          `protobuf:"varint,5,opt,name=last_log_index,json=lastLogIndex,proto3" json:"last_log_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AppendResponse) Reset()         { *m = AppendResponse{} }
func (m *AppendResponse) String() string { return proto.CompactTextString(m) }
func (*AppendResponse) ProtoMessage()    {}
func (*AppendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{15}
}

func (m *AppendResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendResponse.Unmarshal(m, b)
}
func (m *AppendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendResponse.Marshal(b, m, deterministic)
}
func (m *AppendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendResponse.Merge(m, src)
}
func (m *AppendResponse) XXX_Size() int {
	return xxx_messageInfo_AppendResponse.Size(m)
}
func (m *AppendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppendResponse proto.InternalMessageInfo

func (m *AppendResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_OK
}

func (m *AppendResponse) GetError() RaftError {
	if m != nil {
		return m.Error
	}
	return RaftError_NO_LEADER
}

func (m *AppendResponse) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendResponse) GetSucceeded() bool {
	if m != nil {
		return m.Succeeded
	}
	return false
}

func (m *AppendResponse) GetLastLogIndex() int64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

type InstallRequest struct {
	Term                 int64    `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Leader               string   `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	Index                int64    `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Timestamp            int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallRequest) Reset()         { *m = InstallRequest{} }
func (m *InstallRequest) String() string { return proto.CompactTextString(m) }
func (*InstallRequest) ProtoMessage()    {}
func (*InstallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{16}
}

func (m *InstallRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallRequest.Unmarshal(m, b)
}
func (m *InstallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallRequest.Marshal(b, m, deterministic)
}
func (m *InstallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallRequest.Merge(m, src)
}
func (m *InstallRequest) XXX_Size() int {
	return xxx_messageInfo_InstallRequest.Size(m)
}
func (m *InstallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstallRequest proto.InternalMessageInfo

func (m *InstallRequest) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *InstallRequest) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

func (m *InstallRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *InstallRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *InstallRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type InstallResponse struct {
	Status               ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=atomix.raft.ResponseStatus" json:"status,omitempty"`
	Error                RaftError      `protobuf:"varint,2,opt,name=error,proto3,enum=atomix.raft.RaftError" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *InstallResponse) Reset()         { *m = InstallResponse{} }
func (m *InstallResponse) String() string { return proto.CompactTextString(m) }
func (*InstallResponse) ProtoMessage()    {}
func (*InstallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{17}
}

func (m *InstallResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallResponse.Unmarshal(m, b)
}
func (m *InstallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallResponse.Marshal(b, m, deterministic)
}
func (m *InstallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallResponse.Merge(m, src)
}
func (m *InstallResponse) XXX_Size() int {
	return xxx_messageInfo_InstallResponse.Size(m)
}
func (m *InstallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InstallResponse proto.InternalMessageInfo

func (m *InstallResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_OK
}

func (m *InstallResponse) GetError() RaftError {
	if m != nil {
		return m.Error
	}
	return RaftError_NO_LEADER
}

type CommandRequest struct {
	SequenceNumber       int64    `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandRequest) Reset()         { *m = CommandRequest{} }
func (m *CommandRequest) String() string { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()    {}
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{18}
}

func (m *CommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandRequest.Unmarshal(m, b)
}
func (m *CommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandRequest.Marshal(b, m, deterministic)
}
func (m *CommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandRequest.Merge(m, src)
}
func (m *CommandRequest) XXX_Size() int {
	return xxx_messageInfo_CommandRequest.Size(m)
}
func (m *CommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommandRequest proto.InternalMessageInfo

func (m *CommandRequest) GetSequenceNumber() int64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *CommandRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CommandResponse struct {
	Status               ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=atomix.raft.ResponseStatus" json:"status,omitempty"`
	Error                RaftError      `protobuf:"varint,2,opt,name=error,proto3,enum=atomix.raft.RaftError" json:"error,omitempty"`
	Message              string         `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Leader               string         `protobuf:"bytes,4,opt,name=leader,proto3" json:"leader,omitempty"`
	Term                 int64          `protobuf:"varint,5,opt,name=term,proto3" json:"term,omitempty"`
	Members              []string       `protobuf:"bytes,6,rep,name=members,proto3" json:"members,omitempty"`
	Output               []byte         `protobuf:"bytes,7,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CommandResponse) Reset()         { *m = CommandResponse{} }
func (m *CommandResponse) String() string { return proto.CompactTextString(m) }
func (*CommandResponse) ProtoMessage()    {}
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{19}
}

func (m *CommandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandResponse.Unmarshal(m, b)
}
func (m *CommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandResponse.Marshal(b, m, deterministic)
}
func (m *CommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandResponse.Merge(m, src)
}
func (m *CommandResponse) XXX_Size() int {
	return xxx_messageInfo_CommandResponse.Size(m)
}
func (m *CommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommandResponse proto.InternalMessageInfo

func (m *CommandResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_OK
}

func (m *CommandResponse) GetError() RaftError {
	if m != nil {
		return m.Error
	}
	return RaftError_NO_LEADER
}

func (m *CommandResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CommandResponse) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

func (m *CommandResponse) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *CommandResponse) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CommandResponse) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

type QueryRequest struct {
	Value                []byte          `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ReadConsistency      ReadConsistency `protobuf:"varint,2,opt,name=read_consistency,json=readConsistency,proto3,enum=atomix.raft.ReadConsistency" json:"read_consistency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{20}
}

func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRequest.Unmarshal(m, b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRequest.Size(m)
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *QueryRequest) GetReadConsistency() ReadConsistency {
	if m != nil {
		return m.ReadConsistency
	}
	return ReadConsistency_SEQUENTIAL
}

type QueryResponse struct {
	Status               ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=atomix.raft.ResponseStatus" json:"status,omitempty"`
	Error                RaftError      `protobuf:"varint,2,opt,name=error,proto3,enum=atomix.raft.RaftError" json:"error,omitempty"`
	Message              string         `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Output               []byte         `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8493211a49baa8de, []int{21}
}

func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResponse.Unmarshal(m, b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return xxx_messageInfo_QueryResponse.Size(m)
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_OK
}

func (m *QueryResponse) GetError() RaftError {
	if m != nil {
		return m.Error
	}
	return RaftError_NO_LEADER
}

func (m *QueryResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryResponse) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterEnum("atomix.raft.ResponseStatus", ResponseStatus_name, ResponseStatus_value)
	proto.RegisterEnum("atomix.raft.RaftError", RaftError_name, RaftError_value)
	proto.RegisterType((*JoinRequest)(nil), "atomix.raft.JoinRequest")
	proto.RegisterType((*JoinResponse)(nil), "atomix.raft.JoinResponse")
	proto.RegisterType((*ConfigureRequest)(nil), "atomix.raft.ConfigureRequest")
	proto.RegisterType((*ConfigureResponse)(nil), "atomix.raft.ConfigureResponse")
	proto.RegisterType((*ReconfigureRequest)(nil), "atomix.raft.ReconfigureRequest")
	proto.RegisterType((*ReconfigureResponse)(nil), "atomix.raft.ReconfigureResponse")
	proto.RegisterType((*LeaveRequest)(nil), "atomix.raft.LeaveRequest")
	proto.RegisterType((*LeaveResponse)(nil), "atomix.raft.LeaveResponse")
	proto.RegisterType((*PollRequest)(nil), "atomix.raft.PollRequest")
	proto.RegisterType((*PollResponse)(nil), "atomix.raft.PollResponse")
	proto.RegisterType((*VoteRequest)(nil), "atomix.raft.VoteRequest")
	proto.RegisterType((*VoteResponse)(nil), "atomix.raft.VoteResponse")
	proto.RegisterType((*TransferRequest)(nil), "atomix.raft.TransferRequest")
	proto.RegisterType((*TransferResponse)(nil), "atomix.raft.TransferResponse")
	proto.RegisterType((*AppendRequest)(nil), "atomix.raft.AppendRequest")
	proto.RegisterType((*AppendResponse)(nil), "atomix.raft.AppendResponse")
	proto.RegisterType((*InstallRequest)(nil), "atomix.raft.InstallRequest")
	proto.RegisterType((*InstallResponse)(nil), "atomix.raft.InstallResponse")
	proto.RegisterType((*CommandRequest)(nil), "atomix.raft.CommandRequest")
	proto.RegisterType((*CommandResponse)(nil), "atomix.raft.CommandResponse")
	proto.RegisterType((*QueryRequest)(nil), "atomix.raft.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "atomix.raft.QueryResponse")
}

func init() { proto.RegisterFile("atomix/raft/protocol.proto", fileDescriptor_8493211a49baa8de) }

var fileDescriptor_8493211a49baa8de = []byte{
	// 1183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0x37, 0xad, 0x0f, 0x9b, 0xa3, 0x2f, 0x66, 0xe3, 0x38, 0x0a, 0xed, 0xfc, 0xff, 0x2e, 0x1b,
	0xa0, 0x46, 0x50, 0xd8, 0xad, 0x7d, 0x4e, 0x5b, 0x59, 0x66, 0x5c, 0x36, 0x34, 0xe9, 0xac, 0x64,
	0x17, 0x3d, 0x11, 0x0c, 0xb9, 0x16, 0x08, 0x88, 0xa4, 0x4a, 0x2e, 0x85, 0xf8, 0xdc, 0x5e, 0xfa,
	0x02, 0xbd, 0xf4, 0x54, 0xa0, 0x7d, 0x9a, 0x3e, 0x43, 0xdf, 0xa0, 0x3d, 0xf5, 0x05, 0x0a, 0x7e,
	0x6a, 0x49, 0xcb, 0x46, 0x1b, 0x14, 0x4e, 0x80, 0x5c, 0x04, 0xee, 0xcc, 0xec, 0x6f, 0x67, 0x7f,
	0x33, 0xbb, 0x33, 0x2b, 0x10, 0x4d, 0xea, 0xbb, 0xce, 0xeb, 0xfd, 0xc0, 0xbc, 0xa4, 0xfb, 0xb3,
	0xc0, 0xa7, 0xbe, 0xe5, 0x4f, 0xf7, 0x92, 0x0f, 0xd4, 0x4a, 0x75, 0x7b, 0xb1, 0x4e, 0xdc, 0x64,
	0x0d, 0xe3, 0x9f, 0xd4, 0x48, 0x7c, 0xc0, 0xca, 0xa7, 0xfe, 0x24, 0x15, 0x4b, 0x9f, 0x41, 0xeb,
	0x2b, 0xdf, 0xf1, 0x30, 0xf9, 0x36, 0x22, 0x21, 0x45, 0xfb, 0xd0, 0x74, 0x89, 0xfb, 0x8a, 0x04,
	0x7d, 0x6e, 0x87, 0xdb, 0x6d, 0x1d, 0x3c, 0xdc, 0x63, 0xb0, 0xf7, 0xb0, 0x79, 0x49, 0x4f, 0x13,
	0x35, 0xce, 0xcc, 0xa4, 0x3f, 0x38, 0x68, 0xa7, 0x00, 0xe1, 0xcc, 0xf7, 0x42, 0x82, 0x0e, 0xa1,
	0x19, 0x52, 0x93, 0x46, 0x61, 0x82, 0xd0, 0x3d, 0xd8, 0x2a, 0x23, 0x64, 0x66, 0xa3, 0xc4, 0x04,
	0x67, 0xa6, 0xe8, 0x63, 0x68, 0x90, 0x20, 0xf0, 0x83, 0xfe, 0x6a, 0x32, 0x67, 0xf3, 0xda, 0xaa,
	0x72, 0xac, 0xc5, 0xa9, 0x11, 0xda, 0x80, 0x86, 0xe3, 0xd9, 0xe4, 0x75, 0xbf, 0xb6, 0xc3, 0xed,
	0xd6, 0x70, 0x3a, 0x40, 0x08, 0xea, 0x94, 0x04, 0x6e, 0xbf, 0x9e, 0x08, 0x93, 0x6f, 0xb4, 0x0d,
	0x3c, 0x75, 0x5c, 0x12, 0x52, 0xd3, 0x9d, 0xf5, 0x1b, 0x89, 0x62, 0x21, 0x40, 0x9f, 0xc2, 0x5a,
	0xba, 0x8b, 0xb0, 0xdf, 0xdc, 0xa9, 0xdd, 0xb6, 0xdb, 0xdc, 0x4e, 0xfa, 0x95, 0x03, 0x61, 0xe8,
	0x7b, 0x97, 0xce, 0x24, 0x0a, 0x48, 0x4e, 0x5a, 0xbe, 0x32, 0xc7, 0xac, 0xbc, 0x09, 0xcd, 0x29,
	0x31, 0x6d, 0x92, 0x6e, 0x89, 0xc7, 0xd9, 0xe8, 0x06, 0xdf, 0x4b, 0x7e, 0xd6, 0x6f, 0xf1, 0xb3,
	0xf1, 0x0f, 0xfd, 0x9c, 0xc3, 0x3d, 0xc6, 0xcd, 0x3b, 0x0b, 0x8d, 0xe4, 0x03, 0xc2, 0xc4, 0xaa,
	0x12, 0xf4, 0x6f, 0xb3, 0x6a, 0xc1, 0xd2, 0xea, 0xb2, 0x08, 0xd7, 0x16, 0x3c, 0x4b, 0x7f, 0x71,
	0x70, 0xbf, 0xb4, 0xe2, 0x7b, 0x91, 0x86, 0x9f, 0x43, 0x5b, 0x25, 0xe6, 0xfc, 0x8d, 0x09, 0x96,
	0xfe, 0xe4, 0xa0, 0x93, 0x21, 0xbc, 0x17, 0x84, 0xfd, 0xc0, 0x41, 0xeb, 0xcc, 0x9f, 0x4e, 0x6f,
	0x3b, 0xb2, 0xdb, 0xc0, 0x5b, 0xa6, 0x67, 0x3b, 0xb6, 0x49, 0x49, 0x76, 0x6a, 0x17, 0x02, 0xf4,
	0x04, 0xba, 0x53, 0x33, 0xa4, 0xc6, 0xd4, 0x9f, 0x18, 0xec, 0x2e, 0xda, 0xb1, 0x54, 0xf5, 0x27,
	0x4a, 0xb2, 0x19, 0x09, 0x3a, 0x85, 0x15, 0xb3, 0xab, 0x56, 0x66, 0x34, 0x8e, 0x53, 0xf6, 0x67,
	0x0e, 0xda, 0xa9, 0x2f, 0x77, 0x47, 0xfd, 0x92, 0xa3, 0x83, 0x44, 0x58, 0x37, 0x2d, 0x8b, 0xcc,
	0x28, 0xb1, 0x13, 0x37, 0xd7, 0x71, 0x31, 0x4e, 0xf8, 0xba, 0xf0, 0x29, 0x79, 0x17, 0xf8, 0xfa,
	0x89, 0x83, 0x76, 0xea, 0xcb, 0xdb, 0xe5, 0x6b, 0x03, 0x1a, 0x73, 0x7f, 0x41, 0x56, 0x3a, 0x90,
	0xf6, 0xa0, 0x37, 0x0e, 0x4c, 0x2f, 0xbc, 0x24, 0x41, 0x4e, 0xd6, 0x16, 0xf0, 0x69, 0xde, 0x19,
	0x8e, 0x9d, 0xb8, 0xc8, 0xe3, 0xf5, 0x54, 0xa0, 0xd8, 0x52, 0x04, 0xc2, 0xc2, 0xfe, 0xee, 0x2e,
	0xe6, 0xdf, 0x39, 0xe8, 0x0c, 0x66, 0x33, 0xe2, 0xd9, 0x6f, 0x52, 0xb5, 0x9e, 0x40, 0x77, 0x16,
	0x90, 0xf9, 0xf5, 0x60, 0xc6, 0x52, 0x36, 0x98, 0x85, 0x15, 0x1b, 0xcc, 0xcc, 0x28, 0x0e, 0x26,
	0x3a, 0x84, 0x35, 0xe2, 0xd1, 0xc0, 0x21, 0x79, 0x2d, 0x7b, 0x74, 0xcd, 0x6f, 0xd5, 0x9f, 0xc8,
	0x1e, 0x0d, 0xae, 0x70, 0x6e, 0x89, 0x3e, 0x80, 0xb6, 0xe5, 0xbb, 0xae, 0x43, 0xb3, 0xc5, 0x9b,
	0x29, 0x6e, 0x2a, 0x4b, 0xd6, 0x96, 0x7e, 0xe3, 0xa0, 0x9b, 0xef, 0xef, 0xed, 0xa6, 0xc9, 0x36,
	0xf0, 0x61, 0x64, 0x59, 0x84, 0xd8, 0x45, 0xaa, 0x2c, 0x04, 0x4b, 0x8e, 0x45, 0xe3, 0xfa, 0xb1,
	0x90, 0xbe, 0xe7, 0xa0, 0xab, 0x78, 0x21, 0x35, 0x6f, 0xbf, 0xb1, 0xfe, 0xcb, 0x26, 0x03, 0x41,
	0xdd, 0x36, 0xa9, 0x99, 0xb8, 0xd3, 0xc6, 0xc9, 0xb7, 0x44, 0xa1, 0x57, 0x78, 0x71, 0x77, 0xa9,
	0xaa, 0x43, 0x77, 0xe8, 0xbb, 0xae, 0xb9, 0x48, 0xd5, 0x8f, 0xa0, 0x17, 0xc6, 0x9f, 0x9e, 0x45,
	0x0c, 0x2f, 0x2a, 0xea, 0x5c, 0x0d, 0x77, 0x73, 0xb1, 0x16, 0xe5, 0x7d, 0xc3, 0xdc, 0x9c, 0x46,
	0xe9, 0x75, 0xd4, 0xc6, 0xe9, 0x20, 0xee, 0x51, 0x7b, 0x05, 0xe2, 0xdd, 0x25, 0x47, 0x3f, 0x2e,
	0x53, 0x61, 0x68, 0x4e, 0x48, 0x12, 0x07, 0x1e, 0xe7, 0x43, 0x26, 0x6e, 0xf5, 0x52, 0xdc, 0xf2,
	0x18, 0x37, 0x98, 0x18, 0xf7, 0xcb, 0xc5, 0x8e, 0x2f, 0x6a, 0x5a, 0x8c, 0xe2, 0x47, 0x74, 0x16,
	0xd1, 0xfe, 0x5a, 0xb2, 0xdb, 0x6c, 0x24, 0xb9, 0xd0, 0x7e, 0x19, 0x91, 0xe0, 0x2a, 0x67, 0xaf,
	0x20, 0x85, 0x63, 0x48, 0x41, 0x27, 0x20, 0x04, 0xc4, 0xb4, 0x0d, 0xcb, 0xf7, 0x42, 0x27, 0xa4,
	0xc4, 0xb3, 0xae, 0xb2, 0x6d, 0x6d, 0x57, 0xa8, 0x30, 0xed, 0xe1, 0xc2, 0x06, 0xf7, 0x82, 0xb2,
	0x40, 0xfa, 0x85, 0x83, 0x4e, 0xb6, 0xde, 0x3b, 0xc2, 0x6d, 0xc6, 0x4a, 0x9d, 0x65, 0xe5, 0xe9,
	0x87, 0xd0, 0x2d, 0xaf, 0x8c, 0x9a, 0xb0, 0xaa, 0xbf, 0x10, 0x56, 0x10, 0x0f, 0x0d, 0x19, 0x63,
	0x1d, 0x0b, 0xdc, 0xd3, 0xef, 0x56, 0x81, 0x2f, 0xd6, 0x42, 0x1d, 0xe0, 0x35, 0xdd, 0x50, 0xe5,
	0xc1, 0xb1, 0x8c, 0x85, 0x15, 0x74, 0x0f, 0x3a, 0x2f, 0xcf, 0x65, 0xfc, 0x8d, 0xf1, 0x7c, 0xa0,
	0xa8, 0xe7, 0x58, 0x16, 0x38, 0x74, 0x1f, 0x7a, 0x43, 0xfd, 0xf4, 0x74, 0xa0, 0x1d, 0x17, 0xc2,
	0x55, 0xf4, 0x00, 0xee, 0x0d, 0xce, 0xce, 0x54, 0x65, 0x38, 0x18, 0x2b, 0xba, 0x66, 0xa4, 0xd8,
	0x35, 0xd4, 0x87, 0x0d, 0x45, 0x55, 0xe5, 0x93, 0x81, 0x6a, 0x9c, 0xca, 0xa7, 0x47, 0x32, 0x36,
	0x46, 0xe3, 0xc1, 0x58, 0x16, 0xea, 0x08, 0x41, 0xf7, 0x5c, 0x7b, 0xa1, 0xe9, 0x5f, 0x6b, 0xc6,
	0x50, 0x55, 0x64, 0x6d, 0x2c, 0x34, 0x62, 0xe4, 0x5c, 0x36, 0x92, 0x47, 0x23, 0x45, 0xd7, 0x84,
	0x66, 0x59, 0x88, 0x2f, 0x94, 0xa1, 0x2c, 0xac, 0xc5, 0xb3, 0x87, 0xaa, 0x3e, 0x92, 0x8f, 0x0b,
	0xc3, 0xf5, 0x58, 0x76, 0x86, 0xf5, 0xb1, 0x3e, 0xd4, 0xd5, 0x6c, 0x7d, 0x1e, 0x3d, 0x84, 0xfb,
	0x43, 0x5d, 0x7b, 0xae, 0x9c, 0x9c, 0x63, 0xd6, 0x31, 0x40, 0x3d, 0x68, 0x9d, 0x6b, 0x83, 0x8b,
	0x81, 0xa2, 0x0e, 0x8e, 0x54, 0x59, 0x68, 0x1d, 0xfc, 0xd8, 0x84, 0x56, 0xcc, 0xc2, 0x88, 0x04,
	0x73, 0xc7, 0x22, 0xe8, 0x19, 0xd4, 0xe3, 0x27, 0x1e, 0xea, 0x97, 0x62, 0xc2, 0x3c, 0x1b, 0xc5,
	0x47, 0x4b, 0x34, 0x29, 0xd7, 0xd2, 0x0a, 0xfa, 0x02, 0x1a, 0x49, 0xab, 0x89, 0xca, 0x56, 0x6c,
	0x03, 0x2b, 0x8a, 0xcb, 0x54, 0x05, 0x82, 0x0a, 0x7c, 0xf1, 0x9a, 0x41, 0x8f, 0x4b, 0xa6, 0xd5,
	0xc7, 0x98, 0xf8, 0xbf, 0x9b, 0xd4, 0x05, 0x1a, 0x86, 0x16, 0xf3, 0x62, 0x40, 0xff, 0xaf, 0x64,
	0x67, 0xf5, 0xf5, 0x22, 0xee, 0xdc, 0x6c, 0x50, 0x60, 0x3e, 0x83, 0x7a, 0xdc, 0xd2, 0x55, 0x28,
	0x62, 0x3a, 0xce, 0x0a, 0x45, 0x6c, 0xff, 0x97, 0x4e, 0x8f, 0x3b, 0x9c, 0xca, 0x74, 0xa6, 0x01,
	0xab, 0x4c, 0x67, 0xdb, 0x21, 0x69, 0x05, 0x29, 0xb0, 0x9e, 0xf7, 0x14, 0xa8, 0x7c, 0x7a, 0x2b,
	0xad, 0x89, 0xf8, 0xf8, 0x06, 0x6d, 0x01, 0x35, 0x84, 0x66, 0x5a, 0x46, 0x51, 0x39, 0x24, 0xa5,
	0xde, 0x41, 0xdc, 0x5a, 0xaa, 0x2b, 0x40, 0xbe, 0x84, 0xb5, 0xac, 0x6e, 0xa0, 0xb2, 0x65, 0xb9,
	0xa6, 0x89, 0xdb, 0xcb, 0x95, 0x39, 0xce, 0x2e, 0x17, 0x23, 0x65, 0x37, 0x77, 0x05, 0xa9, 0x5c,
	0x21, 0x2a, 0x48, 0x95, 0xcb, 0x5e, 0x5a, 0xf9, 0x84, 0x43, 0x47, 0xd0, 0x48, 0x6e, 0xa9, 0x4a,
	0x16, 0xb2, 0x37, 0x65, 0x25, 0x0b, 0x4b, 0x97, 0x5a, 0x8c, 0xf1, 0xaa, 0x99, 0xfc, 0x67, 0x72,
	0xf8, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x4e, 0x38, 0x0b, 0x8d, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftServiceClient is the client API for RaftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftServiceClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
	Reconfigure(ctx context.Context, in *ReconfigureRequest, opts ...grpc.CallOption) (*ReconfigureResponse, error)
	Poll(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*PollResponse, error)
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	Install(ctx context.Context, opts ...grpc.CallOption) (RaftService_InstallClient, error)
	Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (RaftService_CommandClient, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (RaftService_QueryClient, error)
}

type raftServiceClient struct {
	cc *grpc.ClientConn
}

func NewRaftServiceClient(cc *grpc.ClientConn) RaftServiceClient {
	return &raftServiceClient{cc}
}

func (c *raftServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/atomix.raft.RaftService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, "/atomix.raft.RaftService/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := c.cc.Invoke(ctx, "/atomix.raft.RaftService/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) Reconfigure(ctx context.Context, in *ReconfigureRequest, opts ...grpc.CallOption) (*ReconfigureResponse, error) {
	out := new(ReconfigureResponse)
	err := c.cc.Invoke(ctx, "/atomix.raft.RaftService/Reconfigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) Poll(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*PollResponse, error) {
	out := new(PollResponse)
	err := c.cc.Invoke(ctx, "/atomix.raft.RaftService/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/atomix.raft.RaftService/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/atomix.raft.RaftService/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, "/atomix.raft.RaftService/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) Install(ctx context.Context, opts ...grpc.CallOption) (RaftService_InstallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RaftService_serviceDesc.Streams[0], "/atomix.raft.RaftService/Install", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftServiceInstallClient{stream}
	return x, nil
}

type RaftService_InstallClient interface {
	Send(*InstallRequest) error
	CloseAndRecv() (*InstallResponse, error)
	grpc.ClientStream
}

type raftServiceInstallClient struct {
	grpc.ClientStream
}

func (x *raftServiceInstallClient) Send(m *InstallRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftServiceInstallClient) CloseAndRecv() (*InstallResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InstallResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftServiceClient) Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (RaftService_CommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RaftService_serviceDesc.Streams[1], "/atomix.raft.RaftService/Command", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftServiceCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RaftService_CommandClient interface {
	Recv() (*CommandResponse, error)
	grpc.ClientStream
}

type raftServiceCommandClient struct {
	grpc.ClientStream
}

func (x *raftServiceCommandClient) Recv() (*CommandResponse, error) {
	m := new(CommandResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (RaftService_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RaftService_serviceDesc.Streams[2], "/atomix.raft.RaftService/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftServiceQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RaftService_QueryClient interface {
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type raftServiceQueryClient struct {
	grpc.ClientStream
}

func (x *raftServiceQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RaftServiceServer is the server API for RaftService service.
type RaftServiceServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Leave(context.Context, *LeaveRequest) (*LeaveResponse, error)
	Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
	Reconfigure(context.Context, *ReconfigureRequest) (*ReconfigureResponse, error)
	Poll(context.Context, *PollRequest) (*PollResponse, error)
	Vote(context.Context, *VoteRequest) (*VoteResponse, error)
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	Install(RaftService_InstallServer) error
	Command(*CommandRequest, RaftService_CommandServer) error
	Query(*QueryRequest, RaftService_QueryServer) error
}

// UnimplementedRaftServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServiceServer struct {
}

func (*UnimplementedRaftServiceServer) Join(ctx context.Context, req *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (*UnimplementedRaftServiceServer) Leave(ctx context.Context, req *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (*UnimplementedRaftServiceServer) Configure(ctx context.Context, req *ConfigureRequest) (*ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedRaftServiceServer) Reconfigure(ctx context.Context, req *ReconfigureRequest) (*ReconfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reconfigure not implemented")
}
func (*UnimplementedRaftServiceServer) Poll(ctx context.Context, req *PollRequest) (*PollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedRaftServiceServer) Vote(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedRaftServiceServer) Transfer(ctx context.Context, req *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (*UnimplementedRaftServiceServer) Append(ctx context.Context, req *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (*UnimplementedRaftServiceServer) Install(srv RaftService_InstallServer) error {
	return status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (*UnimplementedRaftServiceServer) Command(req *CommandRequest, srv RaftService_CommandServer) error {
	return status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (*UnimplementedRaftServiceServer) Query(req *QueryRequest, srv RaftService_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}

func RegisterRaftServiceServer(s *grpc.Server, srv RaftServiceServer) {
	s.RegisterService(&_RaftService_serviceDesc, srv)
}

func _RaftService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.raft.RaftService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.raft.RaftService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.raft.RaftService/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_Reconfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).Reconfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.raft.RaftService/Reconfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).Reconfigure(ctx, req.(*ReconfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.raft.RaftService/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).Poll(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.raft.RaftService/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.raft.RaftService/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.raft.RaftService/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_Install_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftServiceServer).Install(&raftServiceInstallServer{stream})
}

type RaftService_InstallServer interface {
	SendAndClose(*InstallResponse) error
	Recv() (*InstallRequest, error)
	grpc.ServerStream
}

type raftServiceInstallServer struct {
	grpc.ServerStream
}

func (x *raftServiceInstallServer) SendAndClose(m *InstallResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftServiceInstallServer) Recv() (*InstallRequest, error) {
	m := new(InstallRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RaftService_Command_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RaftServiceServer).Command(m, &raftServiceCommandServer{stream})
}

type RaftService_CommandServer interface {
	Send(*CommandResponse) error
	grpc.ServerStream
}

type raftServiceCommandServer struct {
	grpc.ServerStream
}

func (x *raftServiceCommandServer) Send(m *CommandResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RaftService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RaftServiceServer).Query(m, &raftServiceQueryServer{stream})
}

type RaftService_QueryServer interface {
	Send(*QueryResponse) error
	grpc.ServerStream
}

type raftServiceQueryServer struct {
	grpc.ServerStream
}

func (x *raftServiceQueryServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _RaftService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.raft.RaftService",
	HandlerType: (*RaftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _RaftService_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _RaftService_Leave_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _RaftService_Configure_Handler,
		},
		{
			MethodName: "Reconfigure",
			Handler:    _RaftService_Reconfigure_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _RaftService_Poll_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _RaftService_Vote_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _RaftService_Transfer_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _RaftService_Append_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Install",
			Handler:       _RaftService_Install_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Command",
			Handler:       _RaftService_Command_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Query",
			Handler:       _RaftService_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "atomix/raft/protocol.proto",
}
