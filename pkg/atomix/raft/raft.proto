/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.raft;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

option (gogoproto.testgen_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.equal_all) = true;

message RaftMember {
    string member_id = 1 [(gogoproto.casttype) = "MemberID", (gogoproto.customname) = "MemberID"];
    Type type = 2;
    google.protobuf.Timestamp updated = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

    enum Type {
        INACTIVE = 0;
        PASSIVE = 1;
        PROMOTABLE = 2;
        ACTIVE = 3;
    }
}

enum ReadConsistency {
    SEQUENTIAL = 0;
    LINEARIZABLE_LEASE = 1;
    LINEARIZABLE = 2;
}

message RaftProtocolConfig {
    google.protobuf.Duration election_timeout = 1 [(gogoproto.stdduration) = true];
    google.protobuf.Duration heartbeat_interval = 2 [(gogoproto.stdduration) = true];
    RaftStorageConfig storage = 3;
    RaftCompactionConfig compaction = 4;
}

message RaftStorageConfig {
    string directory = 1;
    StorageLevel level = 2;
    uint32 max_entry_size = 3;
    uint32 segment_size = 4;
    bool flush_on_commit = 5;
}

enum StorageLevel {
    DISK = 0;
    MAPPED = 1;
}

message RaftCompactionConfig {
    bool dynamic = 1;
    float free_disk_buffer = 2;
    float free_memory_buffer = 3;
}