// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/raft/raft.proto

package raft

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ReadConsistency int32

const (
	ReadConsistency_SEQUENTIAL         ReadConsistency = 0
	ReadConsistency_LINEARIZABLE_LEASE ReadConsistency = 1
	ReadConsistency_LINEARIZABLE       ReadConsistency = 2
)

var ReadConsistency_name = map[int32]string{
	0: "SEQUENTIAL",
	1: "LINEARIZABLE_LEASE",
	2: "LINEARIZABLE",
}

var ReadConsistency_value = map[string]int32{
	"SEQUENTIAL":         0,
	"LINEARIZABLE_LEASE": 1,
	"LINEARIZABLE":       2,
}

func (x ReadConsistency) String() string {
	return proto.EnumName(ReadConsistency_name, int32(x))
}

func (ReadConsistency) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32de74386ddf389b, []int{0}
}

type StorageLevel int32

const (
	StorageLevel_DISK   StorageLevel = 0
	StorageLevel_MAPPED StorageLevel = 1
)

var StorageLevel_name = map[int32]string{
	0: "DISK",
	1: "MAPPED",
}

var StorageLevel_value = map[string]int32{
	"DISK":   0,
	"MAPPED": 1,
}

func (x StorageLevel) String() string {
	return proto.EnumName(StorageLevel_name, int32(x))
}

func (StorageLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32de74386ddf389b, []int{1}
}

type RaftMember_Type int32

const (
	RaftMember_INACTIVE   RaftMember_Type = 0
	RaftMember_PASSIVE    RaftMember_Type = 1
	RaftMember_PROMOTABLE RaftMember_Type = 2
	RaftMember_ACTIVE     RaftMember_Type = 3
)

var RaftMember_Type_name = map[int32]string{
	0: "INACTIVE",
	1: "PASSIVE",
	2: "PROMOTABLE",
	3: "ACTIVE",
}

var RaftMember_Type_value = map[string]int32{
	"INACTIVE":   0,
	"PASSIVE":    1,
	"PROMOTABLE": 2,
	"ACTIVE":     3,
}

func (x RaftMember_Type) String() string {
	return proto.EnumName(RaftMember_Type_name, int32(x))
}

func (RaftMember_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32de74386ddf389b, []int{0, 0}
}

type RaftMember struct {
	MemberID MemberID        `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3,casttype=MemberID" json:"member_id,omitempty"`
	Type     RaftMember_Type `protobuf:"varint,2,opt,name=type,proto3,enum=atomix.raft.RaftMember_Type" json:"type,omitempty"`
	Updated  time.Time       `protobuf:"bytes,3,opt,name=updated,proto3,stdtime" json:"updated"`
}

func (m *RaftMember) Reset()         { *m = RaftMember{} }
func (m *RaftMember) String() string { return proto.CompactTextString(m) }
func (*RaftMember) ProtoMessage()    {}
func (*RaftMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_32de74386ddf389b, []int{0}
}
func (m *RaftMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftMember.Merge(m, src)
}
func (m *RaftMember) XXX_Size() int {
	return m.Size()
}
func (m *RaftMember) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftMember.DiscardUnknown(m)
}

var xxx_messageInfo_RaftMember proto.InternalMessageInfo

func (m *RaftMember) GetMemberID() MemberID {
	if m != nil {
		return m.MemberID
	}
	return ""
}

func (m *RaftMember) GetType() RaftMember_Type {
	if m != nil {
		return m.Type
	}
	return RaftMember_INACTIVE
}

func (m *RaftMember) GetUpdated() time.Time {
	if m != nil {
		return m.Updated
	}
	return time.Time{}
}

type RaftProtocolConfig struct {
	ElectionTimeout   *time.Duration        `protobuf:"bytes,1,opt,name=election_timeout,json=electionTimeout,proto3,stdduration" json:"election_timeout,omitempty"`
	HeartbeatInterval *time.Duration        `protobuf:"bytes,2,opt,name=heartbeat_interval,json=heartbeatInterval,proto3,stdduration" json:"heartbeat_interval,omitempty"`
	Storage           *RaftStorageConfig    `protobuf:"bytes,3,opt,name=storage,proto3" json:"storage,omitempty"`
	Compaction        *RaftCompactionConfig `protobuf:"bytes,4,opt,name=compaction,proto3" json:"compaction,omitempty"`
}

func (m *RaftProtocolConfig) Reset()         { *m = RaftProtocolConfig{} }
func (m *RaftProtocolConfig) String() string { return proto.CompactTextString(m) }
func (*RaftProtocolConfig) ProtoMessage()    {}
func (*RaftProtocolConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_32de74386ddf389b, []int{1}
}
func (m *RaftProtocolConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftProtocolConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftProtocolConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftProtocolConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftProtocolConfig.Merge(m, src)
}
func (m *RaftProtocolConfig) XXX_Size() int {
	return m.Size()
}
func (m *RaftProtocolConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftProtocolConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RaftProtocolConfig proto.InternalMessageInfo

func (m *RaftProtocolConfig) GetElectionTimeout() *time.Duration {
	if m != nil {
		return m.ElectionTimeout
	}
	return nil
}

func (m *RaftProtocolConfig) GetHeartbeatInterval() *time.Duration {
	if m != nil {
		return m.HeartbeatInterval
	}
	return nil
}

func (m *RaftProtocolConfig) GetStorage() *RaftStorageConfig {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *RaftProtocolConfig) GetCompaction() *RaftCompactionConfig {
	if m != nil {
		return m.Compaction
	}
	return nil
}

type RaftStorageConfig struct {
	Directory     string       `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
	Level         StorageLevel `protobuf:"varint,2,opt,name=level,proto3,enum=atomix.raft.StorageLevel" json:"level,omitempty"`
	MaxEntrySize  uint32       `protobuf:"varint,3,opt,name=max_entry_size,json=maxEntrySize,proto3" json:"max_entry_size,omitempty"`
	SegmentSize   uint32       `protobuf:"varint,4,opt,name=segment_size,json=segmentSize,proto3" json:"segment_size,omitempty"`
	FlushOnCommit bool         `protobuf:"varint,5,opt,name=flush_on_commit,json=flushOnCommit,proto3" json:"flush_on_commit,omitempty"`
}

func (m *RaftStorageConfig) Reset()         { *m = RaftStorageConfig{} }
func (m *RaftStorageConfig) String() string { return proto.CompactTextString(m) }
func (*RaftStorageConfig) ProtoMessage()    {}
func (*RaftStorageConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_32de74386ddf389b, []int{2}
}
func (m *RaftStorageConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftStorageConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftStorageConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftStorageConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftStorageConfig.Merge(m, src)
}
func (m *RaftStorageConfig) XXX_Size() int {
	return m.Size()
}
func (m *RaftStorageConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftStorageConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RaftStorageConfig proto.InternalMessageInfo

func (m *RaftStorageConfig) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *RaftStorageConfig) GetLevel() StorageLevel {
	if m != nil {
		return m.Level
	}
	return StorageLevel_DISK
}

func (m *RaftStorageConfig) GetMaxEntrySize() uint32 {
	if m != nil {
		return m.MaxEntrySize
	}
	return 0
}

func (m *RaftStorageConfig) GetSegmentSize() uint32 {
	if m != nil {
		return m.SegmentSize
	}
	return 0
}

func (m *RaftStorageConfig) GetFlushOnCommit() bool {
	if m != nil {
		return m.FlushOnCommit
	}
	return false
}

type RaftCompactionConfig struct {
	Dynamic          bool    `protobuf:"varint,1,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
	FreeDiskBuffer   float32 `protobuf:"fixed32,2,opt,name=free_disk_buffer,json=freeDiskBuffer,proto3" json:"free_disk_buffer,omitempty"`
	FreeMemoryBuffer float32 `protobuf:"fixed32,3,opt,name=free_memory_buffer,json=freeMemoryBuffer,proto3" json:"free_memory_buffer,omitempty"`
}

func (m *RaftCompactionConfig) Reset()         { *m = RaftCompactionConfig{} }
func (m *RaftCompactionConfig) String() string { return proto.CompactTextString(m) }
func (*RaftCompactionConfig) ProtoMessage()    {}
func (*RaftCompactionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_32de74386ddf389b, []int{3}
}
func (m *RaftCompactionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftCompactionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftCompactionConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftCompactionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftCompactionConfig.Merge(m, src)
}
func (m *RaftCompactionConfig) XXX_Size() int {
	return m.Size()
}
func (m *RaftCompactionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftCompactionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RaftCompactionConfig proto.InternalMessageInfo

func (m *RaftCompactionConfig) GetDynamic() bool {
	if m != nil {
		return m.Dynamic
	}
	return false
}

func (m *RaftCompactionConfig) GetFreeDiskBuffer() float32 {
	if m != nil {
		return m.FreeDiskBuffer
	}
	return 0
}

func (m *RaftCompactionConfig) GetFreeMemoryBuffer() float32 {
	if m != nil {
		return m.FreeMemoryBuffer
	}
	return 0
}

func init() {
	proto.RegisterEnum("atomix.raft.ReadConsistency", ReadConsistency_name, ReadConsistency_value)
	proto.RegisterEnum("atomix.raft.StorageLevel", StorageLevel_name, StorageLevel_value)
	proto.RegisterEnum("atomix.raft.RaftMember_Type", RaftMember_Type_name, RaftMember_Type_value)
	proto.RegisterType((*RaftMember)(nil), "atomix.raft.RaftMember")
	proto.RegisterType((*RaftProtocolConfig)(nil), "atomix.raft.RaftProtocolConfig")
	proto.RegisterType((*RaftStorageConfig)(nil), "atomix.raft.RaftStorageConfig")
	proto.RegisterType((*RaftCompactionConfig)(nil), "atomix.raft.RaftCompactionConfig")
}

func init() { proto.RegisterFile("atomix/raft/raft.proto", fileDescriptor_32de74386ddf389b) }

var fileDescriptor_32de74386ddf389b = []byte{
	// 718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x6f, 0xda, 0x4a,
	0x10, 0xc7, 0x59, 0x42, 0x02, 0x19, 0x08, 0x71, 0x56, 0x51, 0x44, 0xa2, 0xc8, 0x10, 0x14, 0x3d,
	0xa1, 0xe8, 0xc9, 0x3c, 0xe5, 0xe9, 0x49, 0xef, 0xd2, 0x4a, 0x06, 0x7c, 0x70, 0x03, 0x84, 0x1a,
	0xda, 0x43, 0x2f, 0x96, 0xc1, 0x6b, 0x62, 0x05, 0x7b, 0x91, 0xbd, 0x44, 0x21, 0x9f, 0xa0, 0xc7,
	0x1c, 0xfb, 0x11, 0x7a, 0xe9, 0xbd, 0x1f, 0x21, 0xc7, 0x48, 0xbd, 0xf4, 0x94, 0xb6, 0xe4, 0x2b,
	0xf4, 0x50, 0xf5, 0x54, 0xed, 0xda, 0x24, 0xb4, 0xf4, 0xd0, 0x0b, 0x1a, 0xff, 0xe7, 0xf7, 0x9f,
	0x9d, 0x19, 0x0d, 0xb0, 0x63, 0x31, 0xea, 0xb9, 0x97, 0xd5, 0xc0, 0x72, 0x98, 0xf8, 0x51, 0xc6,
	0x01, 0x65, 0x14, 0x67, 0x23, 0x5d, 0xe1, 0xd2, 0x9e, 0x3c, 0xa4, 0x74, 0x38, 0x22, 0x55, 0x91,
	0xea, 0x4f, 0x9c, 0xaa, 0x3d, 0x09, 0x2c, 0xe6, 0x52, 0x3f, 0x82, 0xf7, 0x8a, 0xbf, 0xe6, 0x99,
	0xeb, 0x91, 0x90, 0x59, 0xde, 0x38, 0x06, 0xb6, 0x87, 0x74, 0x48, 0x45, 0x58, 0xe5, 0x51, 0xa4,
	0x96, 0xbf, 0x22, 0x00, 0xc3, 0x72, 0x58, 0x8b, 0x78, 0x7d, 0x12, 0xe0, 0xff, 0x60, 0xdd, 0x13,
	0x91, 0xe9, 0xda, 0x05, 0x54, 0x42, 0x95, 0xf5, 0x5a, 0x61, 0x76, 0x57, 0xcc, 0x44, 0x69, 0xbd,
	0xf1, 0x7d, 0x21, 0x36, 0x32, 0x11, 0xaa, 0xdb, 0xf8, 0x1f, 0x48, 0xb1, 0xe9, 0x98, 0x14, 0x92,
	0x25, 0x54, 0xc9, 0x1f, 0xef, 0x2b, 0x0b, 0x8d, 0x2b, 0x8f, 0xd5, 0x95, 0xde, 0x74, 0x4c, 0x0c,
	0x41, 0xe2, 0xa7, 0x90, 0x9e, 0x8c, 0x6d, 0x8b, 0x11, 0xbb, 0xb0, 0x52, 0x42, 0x95, 0xec, 0xf1,
	0x9e, 0x12, 0x0d, 0xa0, 0xcc, 0x07, 0x50, 0x7a, 0xf3, 0x01, 0x6a, 0x99, 0x9b, 0xbb, 0x62, 0xe2,
	0xfa, 0x53, 0x11, 0x19, 0x73, 0x53, 0xf9, 0x09, 0xa4, 0x78, 0x35, 0x9c, 0x83, 0x8c, 0xde, 0x56,
	0xeb, 0x3d, 0xfd, 0xa5, 0x26, 0x25, 0x70, 0x16, 0xd2, 0x1d, 0xb5, 0xdb, 0xe5, 0x1f, 0x08, 0xe7,
	0x01, 0x3a, 0xc6, 0x69, 0xeb, 0xb4, 0xa7, 0xd6, 0x9a, 0x9a, 0x94, 0xc4, 0x00, 0x6b, 0x31, 0xb8,
	0x52, 0x7e, 0x97, 0x04, 0xcc, 0x1b, 0xeb, 0xf0, 0xc7, 0x06, 0x74, 0x54, 0xa7, 0xbe, 0xe3, 0x0e,
	0xf1, 0x33, 0x90, 0xc8, 0x88, 0x0c, 0xf8, 0x5a, 0x4d, 0xbe, 0x3f, 0x3a, 0x61, 0x62, 0x0b, 0xd9,
	0xe3, 0xdd, 0xa5, 0xf6, 0x1a, 0xf1, 0xfe, 0x6b, 0xa9, 0x37, 0xbc, 0xb3, 0xcd, 0xb9, 0xb1, 0x17,
	0xf9, 0x70, 0x1b, 0xf0, 0x19, 0xb1, 0x02, 0xd6, 0x27, 0x16, 0x33, 0x5d, 0x9f, 0x91, 0xe0, 0xc2,
	0x1a, 0x89, 0x0d, 0xfd, 0x41, 0xb5, 0xad, 0x07, 0xab, 0x1e, 0x3b, 0xf1, 0xff, 0x90, 0x0e, 0x19,
	0x0d, 0xac, 0x21, 0x89, 0x37, 0x26, 0x2f, 0xad, 0xb9, 0x1b, 0xe5, 0xa3, 0x61, 0x8c, 0x39, 0x8e,
	0x55, 0x80, 0x01, 0xf5, 0xc6, 0x96, 0x68, 0xaf, 0x90, 0x12, 0xe6, 0x83, 0x25, 0x73, 0xfd, 0x01,
	0x89, 0xfd, 0x0b, 0xa6, 0xf2, 0x07, 0x04, 0x5b, 0x4b, 0x2f, 0xe0, 0x7d, 0x58, 0xb7, 0xdd, 0x80,
	0x0c, 0x18, 0x0d, 0xa6, 0xd1, 0xb5, 0x18, 0x8f, 0x02, 0xae, 0xc2, 0xea, 0x88, 0x5c, 0x90, 0x51,
	0x7c, 0x15, 0xbb, 0x3f, 0xbd, 0x18, 0x17, 0x6a, 0x72, 0xc0, 0x88, 0x38, 0x7c, 0x08, 0x79, 0xcf,
	0xba, 0x34, 0x89, 0xcf, 0x82, 0xa9, 0x19, 0xba, 0x57, 0xd1, 0xa0, 0x1b, 0x46, 0xce, 0xb3, 0x2e,
	0x35, 0x2e, 0x76, 0xdd, 0x2b, 0x82, 0x0f, 0x20, 0x17, 0x92, 0xa1, 0x47, 0x7c, 0x16, 0x31, 0x29,
	0xc1, 0x64, 0x63, 0x4d, 0x20, 0x7f, 0xc1, 0xa6, 0x33, 0x9a, 0x84, 0x67, 0x26, 0xf5, 0xcd, 0x01,
	0xf5, 0x3c, 0x97, 0x15, 0x56, 0x4b, 0xa8, 0x92, 0x31, 0x36, 0x84, 0x7c, 0xea, 0xd7, 0x85, 0x58,
	0x7e, 0x8d, 0x60, 0xfb, 0x77, 0xa3, 0xe3, 0x02, 0xa4, 0xed, 0xa9, 0x6f, 0x79, 0xee, 0x40, 0x8c,
	0x95, 0x31, 0xe6, 0x9f, 0xb8, 0x02, 0x92, 0x13, 0x10, 0x62, 0xda, 0x6e, 0x78, 0x6e, 0xf6, 0x27,
	0x8e, 0x43, 0x02, 0x31, 0x5f, 0xd2, 0xc8, 0x73, 0xbd, 0xe1, 0x86, 0xe7, 0x35, 0xa1, 0xe2, 0xbf,
	0x01, 0x0b, 0xd2, 0x23, 0x1e, 0x0d, 0xa6, 0x73, 0x76, 0x45, 0xb0, 0xa2, 0x46, 0x4b, 0x24, 0x22,
	0xfa, 0xe8, 0x04, 0x36, 0x0d, 0x62, 0xd9, 0x75, 0xea, 0x87, 0x6e, 0xc8, 0x88, 0x3f, 0x98, 0xf2,
	0xfb, 0xed, 0x6a, 0xcf, 0x5f, 0x68, 0xed, 0x9e, 0xae, 0x36, 0xa5, 0x04, 0xde, 0x01, 0xdc, 0xd4,
	0xdb, 0x9a, 0x6a, 0xe8, 0xaf, 0xf8, 0x45, 0x9b, 0x4d, 0x4d, 0xed, 0xf2, 0x3b, 0x97, 0x20, 0xb7,
	0xa8, 0x4b, 0xc9, 0xa3, 0x43, 0xc8, 0x2d, 0xee, 0x17, 0x67, 0x20, 0xd5, 0xd0, 0xbb, 0x27, 0x52,
	0x82, 0xff, 0x07, 0x5a, 0x6a, 0xa7, 0xa3, 0x35, 0x24, 0x54, 0x3b, 0xfc, 0xf6, 0x45, 0x46, 0x6f,
	0x67, 0x32, 0x7a, 0x3f, 0x93, 0xd1, 0xcd, 0x4c, 0x46, 0xb7, 0x33, 0x19, 0x7d, 0x9e, 0xc9, 0xe8,
	0xfa, 0x5e, 0x4e, 0xdc, 0xde, 0xcb, 0x89, 0x8f, 0xf7, 0x72, 0xa2, 0xbf, 0x26, 0x4e, 0xf4, 0xdf,
	0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xaf, 0x83, 0xa7, 0xa5, 0x04, 0x00, 0x00,
}

func (this *RaftMember) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftMember)
	if !ok {
		that2, ok := that.(RaftMember)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MemberID != that1.MemberID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Updated.Equal(that1.Updated) {
		return false
	}
	return true
}
func (this *RaftProtocolConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftProtocolConfig)
	if !ok {
		that2, ok := that.(RaftProtocolConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ElectionTimeout != nil && that1.ElectionTimeout != nil {
		if *this.ElectionTimeout != *that1.ElectionTimeout {
			return false
		}
	} else if this.ElectionTimeout != nil {
		return false
	} else if that1.ElectionTimeout != nil {
		return false
	}
	if this.HeartbeatInterval != nil && that1.HeartbeatInterval != nil {
		if *this.HeartbeatInterval != *that1.HeartbeatInterval {
			return false
		}
	} else if this.HeartbeatInterval != nil {
		return false
	} else if that1.HeartbeatInterval != nil {
		return false
	}
	if !this.Storage.Equal(that1.Storage) {
		return false
	}
	if !this.Compaction.Equal(that1.Compaction) {
		return false
	}
	return true
}
func (this *RaftStorageConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftStorageConfig)
	if !ok {
		that2, ok := that.(RaftStorageConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Directory != that1.Directory {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.MaxEntrySize != that1.MaxEntrySize {
		return false
	}
	if this.SegmentSize != that1.SegmentSize {
		return false
	}
	if this.FlushOnCommit != that1.FlushOnCommit {
		return false
	}
	return true
}
func (this *RaftCompactionConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftCompactionConfig)
	if !ok {
		that2, ok := that.(RaftCompactionConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dynamic != that1.Dynamic {
		return false
	}
	if this.FreeDiskBuffer != that1.FreeDiskBuffer {
		return false
	}
	if this.FreeMemoryBuffer != that1.FreeMemoryBuffer {
		return false
	}
	return true
}
func (m *RaftMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Updated, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintRaft(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.Type != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MemberID) > 0 {
		i -= len(m.MemberID)
		copy(dAtA[i:], m.MemberID)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.MemberID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RaftProtocolConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftProtocolConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftProtocolConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Compaction != nil {
		{
			size, err := m.Compaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Storage != nil {
		{
			size, err := m.Storage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.HeartbeatInterval != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.HeartbeatInterval, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatInterval):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintRaft(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x12
	}
	if m.ElectionTimeout != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ElectionTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ElectionTimeout):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintRaft(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RaftStorageConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftStorageConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlushOnCommit {
		i--
		if m.FlushOnCommit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.SegmentSize != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.SegmentSize))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxEntrySize != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.MaxEntrySize))
		i--
		dAtA[i] = 0x18
	}
	if m.Level != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Directory) > 0 {
		i -= len(m.Directory)
		copy(dAtA[i:], m.Directory)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.Directory)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RaftCompactionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftCompactionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftCompactionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FreeMemoryBuffer != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FreeMemoryBuffer))))
		i--
		dAtA[i] = 0x1d
	}
	if m.FreeDiskBuffer != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FreeDiskBuffer))))
		i--
		dAtA[i] = 0x15
	}
	if m.Dynamic {
		i--
		if m.Dynamic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRaft(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedRaftMember(r randyRaft, easy bool) *RaftMember {
	this := &RaftMember{}
	this.MemberID = MemberID(randStringRaft(r))
	this.Type = RaftMember_Type([]int32{0, 1, 2, 3}[r.Intn(4)])
	v1 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Updated = *v1
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaftProtocolConfig(r randyRaft, easy bool) *RaftProtocolConfig {
	this := &RaftProtocolConfig{}
	if r.Intn(5) != 0 {
		this.ElectionTimeout = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	}
	if r.Intn(5) != 0 {
		this.HeartbeatInterval = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Storage = NewPopulatedRaftStorageConfig(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Compaction = NewPopulatedRaftCompactionConfig(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaftStorageConfig(r randyRaft, easy bool) *RaftStorageConfig {
	this := &RaftStorageConfig{}
	this.Directory = string(randStringRaft(r))
	this.Level = StorageLevel([]int32{0, 1}[r.Intn(2)])
	this.MaxEntrySize = uint32(r.Uint32())
	this.SegmentSize = uint32(r.Uint32())
	this.FlushOnCommit = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaftCompactionConfig(r randyRaft, easy bool) *RaftCompactionConfig {
	this := &RaftCompactionConfig{}
	this.Dynamic = bool(bool(r.Intn(2) == 0))
	this.FreeDiskBuffer = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.FreeDiskBuffer *= -1
	}
	this.FreeMemoryBuffer = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.FreeMemoryBuffer *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRaft interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRaft(r randyRaft) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRaft(r randyRaft) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneRaft(r)
	}
	return string(tmps)
}
func randUnrecognizedRaft(r randyRaft, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRaft(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRaft(dAtA []byte, r randyRaft, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRaft(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateRaft(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateRaft(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRaft(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRaft(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRaft(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRaft(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RaftMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberID)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRaft(uint64(m.Type))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated)
	n += 1 + l + sovRaft(uint64(l))
	return n
}

func (m *RaftProtocolConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ElectionTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ElectionTimeout)
		n += 1 + l + sovRaft(uint64(l))
	}
	if m.HeartbeatInterval != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatInterval)
		n += 1 + l + sovRaft(uint64(l))
	}
	if m.Storage != nil {
		l = m.Storage.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	if m.Compaction != nil {
		l = m.Compaction.Size()
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}

func (m *RaftStorageConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Directory)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovRaft(uint64(m.Level))
	}
	if m.MaxEntrySize != 0 {
		n += 1 + sovRaft(uint64(m.MaxEntrySize))
	}
	if m.SegmentSize != 0 {
		n += 1 + sovRaft(uint64(m.SegmentSize))
	}
	if m.FlushOnCommit {
		n += 2
	}
	return n
}

func (m *RaftCompactionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dynamic {
		n += 2
	}
	if m.FreeDiskBuffer != 0 {
		n += 5
	}
	if m.FreeMemoryBuffer != 0 {
		n += 5
	}
	return n
}

func sovRaft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaft(x uint64) (n int) {
	return sovRaft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberID = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RaftMember_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Updated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftProtocolConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftProtocolConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftProtocolConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElectionTimeout == nil {
				m.ElectionTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ElectionTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatInterval == nil {
				m.HeartbeatInterval = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.HeartbeatInterval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Storage == nil {
				m.Storage = &RaftStorageConfig{}
			}
			if err := m.Storage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Compaction == nil {
				m.Compaction = &RaftCompactionConfig{}
			}
			if err := m.Compaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftStorageConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftStorageConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftStorageConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Directory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Directory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= StorageLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEntrySize", wireType)
			}
			m.MaxEntrySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEntrySize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentSize", wireType)
			}
			m.SegmentSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushOnCommit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlushOnCommit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftCompactionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftCompactionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftCompactionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dynamic = bool(v != 0)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeDiskBuffer", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FreeDiskBuffer = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeMemoryBuffer", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FreeMemoryBuffer = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaft
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRaft
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaft
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaft(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRaft
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaft = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaft   = fmt.Errorf("proto: integer overflow")
)
