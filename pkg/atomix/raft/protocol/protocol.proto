/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.raft.protocol;

import "atomix/raft/protocol/cluster.proto";
import "atomix/raft/protocol/log.proto";
import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

option (gogoproto.equal_all) = true;

enum ReadConsistency {
    SEQUENTIAL = 0;
    LINEARIZABLE_LEASE = 1;
    LINEARIZABLE = 2;
}

message JoinRequest {
    RaftMember member = 1;
}

message JoinResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    int64 index = 3 [(gogoproto.casttype) = "Index"];
    int64 term = 4 [(gogoproto.casttype) = "Term"];
    google.protobuf.Timestamp timestamp = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    repeated RaftMember members = 6;
}

message ConfigureRequest {
    int64 term = 1 [(gogoproto.casttype) = "Term"];
    string leader = 2 [(gogoproto.casttype) = "MemberID"];
    int64 index = 3 [(gogoproto.casttype) = "Index"];
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    repeated RaftMember members = 5;
}

message ConfigureResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
}

message ReconfigureRequest {
    RaftMember member = 1;
    int64 index = 2 [(gogoproto.casttype) = "Index"];
    int64 term = 3 [(gogoproto.casttype) = "Term"];
}

message ReconfigureResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    int64 index = 3 [(gogoproto.casttype) = "Index"];
    int64 term = 4 [(gogoproto.casttype) = "Term"];
    google.protobuf.Timestamp timestamp = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    repeated RaftMember members = 6;
}

message LeaveRequest {
    RaftMember member = 1;
}

message LeaveResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    int64 index = 3 [(gogoproto.casttype) = "Index"];
    int64 term = 4 [(gogoproto.casttype) = "Term"];
    google.protobuf.Timestamp timestamp = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    repeated RaftMember members = 6;
}

message PollRequest {
    int64 term = 1 [(gogoproto.casttype) = "Term"];
    string candidate = 2 [(gogoproto.casttype) = "MemberID"];
    int64 last_log_index = 3 [(gogoproto.casttype) = "Index"];
    int64 last_log_term = 4 [(gogoproto.casttype) = "Term"];
}

message PollResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    int64 term = 3 [(gogoproto.casttype) = "Term"];
    bool accepted = 4;
}

message VoteRequest {
    int64 term = 1 [(gogoproto.casttype) = "Term"];
    string candidate = 2 [(gogoproto.casttype) = "MemberID"];
    int64 last_log_index = 3 [(gogoproto.casttype) = "Index"];
    int64 last_log_term = 4 [(gogoproto.casttype) = "Term"];
}

message VoteResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    int64 term = 3 [(gogoproto.casttype) = "Term"];
    bool voted = 4;
}

message TransferRequest {
    string member = 1 [(gogoproto.casttype) = "MemberID"];
}

message TransferResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
}

message AppendRequest {
    int64 term = 1 [(gogoproto.casttype) = "Term"];
    string leader = 2 [(gogoproto.casttype) = "MemberID"];
    int64 prev_log_index = 3 [(gogoproto.casttype) = "Index"];
    int64 prev_log_term = 4 [(gogoproto.casttype) = "Term"];
    repeated RaftLogEntry entries = 5;
    int64 commit_index = 6 [(gogoproto.casttype) = "Index"];
}

message AppendResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    int64 term = 3 [(gogoproto.casttype) = "Term"];
    bool succeeded = 4;
    int64 last_log_index = 5 [(gogoproto.casttype) = "Index"];
}

message InstallRequest {
    int64 term = 1 [(gogoproto.casttype) = "Term"];
    string leader = 2 [(gogoproto.casttype) = "MemberID"];
    int64 index = 3 [(gogoproto.casttype) = "Index"];
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    bytes data = 5;
}

message InstallResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
}

message CommandRequest {
    bytes value = 1;
}

message CommandResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    string message = 3;
    string leader = 4 [(gogoproto.casttype) = "MemberID"];
    int64 term = 5 [(gogoproto.casttype) = "Term"];
    repeated string members = 6 [(gogoproto.casttype) = "MemberID"];
    bytes output = 7;
}

message QueryRequest {
    bytes value = 1;
    ReadConsistency read_consistency = 2;
}

message QueryResponse {
    ResponseStatus status = 1;
    RaftError error = 2;
    string message = 3;
    bytes output = 4;
}

enum ResponseStatus {
    OK = 0;
    ERROR = 1;
}

enum RaftError {
    NO_LEADER = 0;
    QUERY_FAILURE = 1;
    COMMAND_FAILURE = 2;
    APPLICATION_ERROR = 3;
    ILLEGAL_MEMBER_STATE = 4;
    UNKNOWN_CLIENT = 5;
    UNKNOWN_SESSION = 6;
    UNKNOWN_SERVICE = 7;
    CLOSED_SESSION = 8;
    PROTOCOL_ERROR = 9;
    CONFIGURATION_ERROR = 10;
    UNAVAILABLE = 11;
}

service RaftService {
    rpc Join(JoinRequest) returns (JoinResponse) {}
    rpc Leave(LeaveRequest) returns (LeaveResponse) {}
    rpc Configure(ConfigureRequest) returns (ConfigureResponse) {}
    rpc Reconfigure(ReconfigureRequest) returns (ReconfigureResponse) {}
    rpc Poll(PollRequest) returns (PollResponse) {}
    rpc Vote(VoteRequest) returns (VoteResponse) {}
    rpc Transfer(TransferRequest) returns (TransferResponse) {}
    rpc Append(AppendRequest) returns (AppendResponse) {}
    rpc Install(stream InstallRequest) returns (InstallResponse) {}
    rpc Command(CommandRequest) returns (stream CommandResponse) {}
    rpc Query(QueryRequest) returns (stream QueryResponse) {}
}
