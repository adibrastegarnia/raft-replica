// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/atomix/raft/protocol/protocol.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	protocol "github.com/atomix/raft-replica/pkg/atomix/raft/protocol"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Join mocks base method
func (m *MockClient) Join(ctx context.Context, request *protocol.JoinRequest, member protocol.MemberID) (*protocol.JoinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", ctx, request, member)
	ret0, _ := ret[0].(*protocol.JoinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Join indicates an expected call of Join
func (mr *MockClientMockRecorder) Join(ctx, request, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockClient)(nil).Join), ctx, request, member)
}

// Leave mocks base method
func (m *MockClient) Leave(ctx context.Context, request *protocol.LeaveRequest, member protocol.MemberID) (*protocol.LeaveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leave", ctx, request, member)
	ret0, _ := ret[0].(*protocol.LeaveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Leave indicates an expected call of Leave
func (mr *MockClientMockRecorder) Leave(ctx, request, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockClient)(nil).Leave), ctx, request, member)
}

// Configure mocks base method
func (m *MockClient) Configure(ctx context.Context, request *protocol.ConfigureRequest, member protocol.MemberID) (*protocol.ConfigureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", ctx, request, member)
	ret0, _ := ret[0].(*protocol.ConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure
func (mr *MockClientMockRecorder) Configure(ctx, request, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockClient)(nil).Configure), ctx, request, member)
}

// Reconfigure mocks base method
func (m *MockClient) Reconfigure(ctx context.Context, request *protocol.ReconfigureRequest, member protocol.MemberID) (*protocol.ReconfigureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconfigure", ctx, request, member)
	ret0, _ := ret[0].(*protocol.ReconfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reconfigure indicates an expected call of Reconfigure
func (mr *MockClientMockRecorder) Reconfigure(ctx, request, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconfigure", reflect.TypeOf((*MockClient)(nil).Reconfigure), ctx, request, member)
}

// Poll mocks base method
func (m *MockClient) Poll(ctx context.Context, request *protocol.PollRequest, member protocol.MemberID) (*protocol.PollResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll", ctx, request, member)
	ret0, _ := ret[0].(*protocol.PollResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Poll indicates an expected call of Poll
func (mr *MockClientMockRecorder) Poll(ctx, request, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockClient)(nil).Poll), ctx, request, member)
}

// Vote mocks base method
func (m *MockClient) Vote(ctx context.Context, request *protocol.VoteRequest, member protocol.MemberID) (*protocol.VoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", ctx, request, member)
	ret0, _ := ret[0].(*protocol.VoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vote indicates an expected call of Vote
func (mr *MockClientMockRecorder) Vote(ctx, request, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockClient)(nil).Vote), ctx, request, member)
}

// Transfer mocks base method
func (m *MockClient) Transfer(ctx context.Context, request *protocol.TransferRequest, member protocol.MemberID) (*protocol.TransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, request, member)
	ret0, _ := ret[0].(*protocol.TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer
func (mr *MockClientMockRecorder) Transfer(ctx, request, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockClient)(nil).Transfer), ctx, request, member)
}

// Append mocks base method
func (m *MockClient) Append(ctx context.Context, request *protocol.AppendRequest, member protocol.MemberID) (*protocol.AppendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, request, member)
	ret0, _ := ret[0].(*protocol.AppendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append
func (mr *MockClientMockRecorder) Append(ctx, request, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockClient)(nil).Append), ctx, request, member)
}

// Install mocks base method
func (m *MockClient) Install(ctx context.Context, member protocol.MemberID) (chan<- *protocol.InstallRequest, <-chan *protocol.InstallStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", ctx, member)
	ret0, _ := ret[0].(chan<- *protocol.InstallRequest)
	ret1, _ := ret[1].(<-chan *protocol.InstallStreamResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Install indicates an expected call of Install
func (mr *MockClientMockRecorder) Install(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockClient)(nil).Install), ctx, member)
}

// Command mocks base method
func (m *MockClient) Command(ctx context.Context, request *protocol.CommandRequest, member protocol.MemberID) (<-chan *protocol.CommandStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command", ctx, request, member)
	ret0, _ := ret[0].(<-chan *protocol.CommandStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Command indicates an expected call of Command
func (mr *MockClientMockRecorder) Command(ctx, request, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockClient)(nil).Command), ctx, request, member)
}

// Query mocks base method
func (m *MockClient) Query(ctx context.Context, request *protocol.QueryRequest, member protocol.MemberID) (<-chan *protocol.QueryStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, request, member)
	ret0, _ := ret[0].(<-chan *protocol.QueryStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockClientMockRecorder) Query(ctx, request, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockClient)(nil).Query), ctx, request, member)
}

// MockServer is a mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Join mocks base method
func (m *MockServer) Join(ctx context.Context, request *protocol.JoinRequest) (*protocol.JoinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", ctx, request)
	ret0, _ := ret[0].(*protocol.JoinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Join indicates an expected call of Join
func (mr *MockServerMockRecorder) Join(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockServer)(nil).Join), ctx, request)
}

// Leave mocks base method
func (m *MockServer) Leave(ctx context.Context, request *protocol.LeaveRequest) (*protocol.LeaveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leave", ctx, request)
	ret0, _ := ret[0].(*protocol.LeaveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Leave indicates an expected call of Leave
func (mr *MockServerMockRecorder) Leave(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockServer)(nil).Leave), ctx, request)
}

// Configure mocks base method
func (m *MockServer) Configure(ctx context.Context, request *protocol.ConfigureRequest) (*protocol.ConfigureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", ctx, request)
	ret0, _ := ret[0].(*protocol.ConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure
func (mr *MockServerMockRecorder) Configure(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockServer)(nil).Configure), ctx, request)
}

// Reconfigure mocks base method
func (m *MockServer) Reconfigure(ctx context.Context, request *protocol.ReconfigureRequest) (*protocol.ReconfigureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconfigure", ctx, request)
	ret0, _ := ret[0].(*protocol.ReconfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reconfigure indicates an expected call of Reconfigure
func (mr *MockServerMockRecorder) Reconfigure(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconfigure", reflect.TypeOf((*MockServer)(nil).Reconfigure), ctx, request)
}

// Poll mocks base method
func (m *MockServer) Poll(ctx context.Context, request *protocol.PollRequest) (*protocol.PollResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll", ctx, request)
	ret0, _ := ret[0].(*protocol.PollResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Poll indicates an expected call of Poll
func (mr *MockServerMockRecorder) Poll(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockServer)(nil).Poll), ctx, request)
}

// Vote mocks base method
func (m *MockServer) Vote(ctx context.Context, request *protocol.VoteRequest) (*protocol.VoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", ctx, request)
	ret0, _ := ret[0].(*protocol.VoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vote indicates an expected call of Vote
func (mr *MockServerMockRecorder) Vote(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockServer)(nil).Vote), ctx, request)
}

// Transfer mocks base method
func (m *MockServer) Transfer(ctx context.Context, request *protocol.TransferRequest) (*protocol.TransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, request)
	ret0, _ := ret[0].(*protocol.TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer
func (mr *MockServerMockRecorder) Transfer(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockServer)(nil).Transfer), ctx, request)
}

// Append mocks base method
func (m *MockServer) Append(ctx context.Context, request *protocol.AppendRequest) (*protocol.AppendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, request)
	ret0, _ := ret[0].(*protocol.AppendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append
func (mr *MockServerMockRecorder) Append(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockServer)(nil).Append), ctx, request)
}

// Install mocks base method
func (m *MockServer) Install(ch <-chan *protocol.InstallStreamRequest) (*protocol.InstallResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", ch)
	ret0, _ := ret[0].(*protocol.InstallResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Install indicates an expected call of Install
func (mr *MockServerMockRecorder) Install(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockServer)(nil).Install), ch)
}

// Command mocks base method
func (m *MockServer) Command(request *protocol.CommandRequest, ch chan<- *protocol.CommandStreamResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command", request, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Command indicates an expected call of Command
func (mr *MockServerMockRecorder) Command(request, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockServer)(nil).Command), request, ch)
}

// Query mocks base method
func (m *MockServer) Query(request *protocol.QueryRequest, ch chan<- *protocol.QueryStreamResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", request, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query
func (mr *MockServerMockRecorder) Query(request, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockServer)(nil).Query), request, ch)
}
