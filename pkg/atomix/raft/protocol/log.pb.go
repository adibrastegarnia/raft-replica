// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/raft/protocol/log.proto

package protocol

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Raft log entry
type RaftLogEntry struct {
	Term      Term      `protobuf:"varint,1,opt,name=term,proto3,casttype=Term" json:"term,omitempty"`
	Timestamp time.Time `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	// Types that are valid to be assigned to Entry:
	//	*RaftLogEntry_Initialize
	//	*RaftLogEntry_Configuration
	//	*RaftLogEntry_Command
	//	*RaftLogEntry_Query
	Entry isRaftLogEntry_Entry `protobuf_oneof:"entry"`
}

func (m *RaftLogEntry) Reset()         { *m = RaftLogEntry{} }
func (m *RaftLogEntry) String() string { return proto.CompactTextString(m) }
func (*RaftLogEntry) ProtoMessage()    {}
func (*RaftLogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_169d8cb0b7cb7546, []int{0}
}
func (m *RaftLogEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftLogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftLogEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftLogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftLogEntry.Merge(m, src)
}
func (m *RaftLogEntry) XXX_Size() int {
	return m.Size()
}
func (m *RaftLogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftLogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RaftLogEntry proto.InternalMessageInfo

type isRaftLogEntry_Entry interface {
	isRaftLogEntry_Entry()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RaftLogEntry_Initialize struct {
	Initialize *InitializeEntry `protobuf:"bytes,3,opt,name=initialize,proto3,oneof"`
}
type RaftLogEntry_Configuration struct {
	Configuration *ConfigurationEntry `protobuf:"bytes,4,opt,name=configuration,proto3,oneof"`
}
type RaftLogEntry_Command struct {
	Command *CommandEntry `protobuf:"bytes,5,opt,name=command,proto3,oneof"`
}
type RaftLogEntry_Query struct {
	Query *QueryEntry `protobuf:"bytes,6,opt,name=query,proto3,oneof"`
}

func (*RaftLogEntry_Initialize) isRaftLogEntry_Entry()    {}
func (*RaftLogEntry_Configuration) isRaftLogEntry_Entry() {}
func (*RaftLogEntry_Command) isRaftLogEntry_Entry()       {}
func (*RaftLogEntry_Query) isRaftLogEntry_Entry()         {}

func (m *RaftLogEntry) GetEntry() isRaftLogEntry_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *RaftLogEntry) GetTerm() Term {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RaftLogEntry) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *RaftLogEntry) GetInitialize() *InitializeEntry {
	if x, ok := m.GetEntry().(*RaftLogEntry_Initialize); ok {
		return x.Initialize
	}
	return nil
}

func (m *RaftLogEntry) GetConfiguration() *ConfigurationEntry {
	if x, ok := m.GetEntry().(*RaftLogEntry_Configuration); ok {
		return x.Configuration
	}
	return nil
}

func (m *RaftLogEntry) GetCommand() *CommandEntry {
	if x, ok := m.GetEntry().(*RaftLogEntry_Command); ok {
		return x.Command
	}
	return nil
}

func (m *RaftLogEntry) GetQuery() *QueryEntry {
	if x, ok := m.GetEntry().(*RaftLogEntry_Query); ok {
		return x.Query
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RaftLogEntry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RaftLogEntry_OneofMarshaler, _RaftLogEntry_OneofUnmarshaler, _RaftLogEntry_OneofSizer, []interface{}{
		(*RaftLogEntry_Initialize)(nil),
		(*RaftLogEntry_Configuration)(nil),
		(*RaftLogEntry_Command)(nil),
		(*RaftLogEntry_Query)(nil),
	}
}

func _RaftLogEntry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RaftLogEntry)
	// entry
	switch x := m.Entry.(type) {
	case *RaftLogEntry_Initialize:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Initialize); err != nil {
			return err
		}
	case *RaftLogEntry_Configuration:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Configuration); err != nil {
			return err
		}
	case *RaftLogEntry_Command:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Command); err != nil {
			return err
		}
	case *RaftLogEntry_Query:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Query); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RaftLogEntry.Entry has unexpected type %T", x)
	}
	return nil
}

func _RaftLogEntry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RaftLogEntry)
	switch tag {
	case 3: // entry.initialize
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InitializeEntry)
		err := b.DecodeMessage(msg)
		m.Entry = &RaftLogEntry_Initialize{msg}
		return true, err
	case 4: // entry.configuration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConfigurationEntry)
		err := b.DecodeMessage(msg)
		m.Entry = &RaftLogEntry_Configuration{msg}
		return true, err
	case 5: // entry.command
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommandEntry)
		err := b.DecodeMessage(msg)
		m.Entry = &RaftLogEntry_Command{msg}
		return true, err
	case 6: // entry.query
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QueryEntry)
		err := b.DecodeMessage(msg)
		m.Entry = &RaftLogEntry_Query{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RaftLogEntry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RaftLogEntry)
	// entry
	switch x := m.Entry.(type) {
	case *RaftLogEntry_Initialize:
		s := proto.Size(x.Initialize)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftLogEntry_Configuration:
		s := proto.Size(x.Configuration)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftLogEntry_Command:
		s := proto.Size(x.Command)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftLogEntry_Query:
		s := proto.Size(x.Query)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type InitializeEntry struct {
}

func (m *InitializeEntry) Reset()         { *m = InitializeEntry{} }
func (m *InitializeEntry) String() string { return proto.CompactTextString(m) }
func (*InitializeEntry) ProtoMessage()    {}
func (*InitializeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_169d8cb0b7cb7546, []int{1}
}
func (m *InitializeEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitializeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitializeEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitializeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitializeEntry.Merge(m, src)
}
func (m *InitializeEntry) XXX_Size() int {
	return m.Size()
}
func (m *InitializeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_InitializeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_InitializeEntry proto.InternalMessageInfo

type ConfigurationEntry struct {
	Members []*RaftMember `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *ConfigurationEntry) Reset()         { *m = ConfigurationEntry{} }
func (m *ConfigurationEntry) String() string { return proto.CompactTextString(m) }
func (*ConfigurationEntry) ProtoMessage()    {}
func (*ConfigurationEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_169d8cb0b7cb7546, []int{2}
}
func (m *ConfigurationEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigurationEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigurationEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigurationEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigurationEntry.Merge(m, src)
}
func (m *ConfigurationEntry) XXX_Size() int {
	return m.Size()
}
func (m *ConfigurationEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigurationEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigurationEntry proto.InternalMessageInfo

func (m *ConfigurationEntry) GetMembers() []*RaftMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type CommandEntry struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CommandEntry) Reset()         { *m = CommandEntry{} }
func (m *CommandEntry) String() string { return proto.CompactTextString(m) }
func (*CommandEntry) ProtoMessage()    {}
func (*CommandEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_169d8cb0b7cb7546, []int{3}
}
func (m *CommandEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandEntry.Merge(m, src)
}
func (m *CommandEntry) XXX_Size() int {
	return m.Size()
}
func (m *CommandEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CommandEntry proto.InternalMessageInfo

func (m *CommandEntry) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type QueryEntry struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryEntry) Reset()         { *m = QueryEntry{} }
func (m *QueryEntry) String() string { return proto.CompactTextString(m) }
func (*QueryEntry) ProtoMessage()    {}
func (*QueryEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_169d8cb0b7cb7546, []int{4}
}
func (m *QueryEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEntry.Merge(m, src)
}
func (m *QueryEntry) XXX_Size() int {
	return m.Size()
}
func (m *QueryEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEntry.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEntry proto.InternalMessageInfo

func (m *QueryEntry) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*RaftLogEntry)(nil), "atomix.raft.protocol.RaftLogEntry")
	proto.RegisterType((*InitializeEntry)(nil), "atomix.raft.protocol.InitializeEntry")
	proto.RegisterType((*ConfigurationEntry)(nil), "atomix.raft.protocol.ConfigurationEntry")
	proto.RegisterType((*CommandEntry)(nil), "atomix.raft.protocol.CommandEntry")
	proto.RegisterType((*QueryEntry)(nil), "atomix.raft.protocol.QueryEntry")
}

func init() { proto.RegisterFile("atomix/raft/protocol/log.proto", fileDescriptor_169d8cb0b7cb7546) }

var fileDescriptor_169d8cb0b7cb7546 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x8a, 0xd4, 0x30,
	0x18, 0xc7, 0x1b, 0x67, 0xba, 0xb3, 0x7e, 0x8e, 0x88, 0x61, 0x0e, 0x65, 0x58, 0xd2, 0x12, 0x14,
	0xe6, 0x94, 0x82, 0x5e, 0xc4, 0x83, 0x87, 0x8a, 0xa8, 0xa0, 0xb0, 0x96, 0x7d, 0x81, 0x4c, 0x4d,
	0x4b, 0xa0, 0x69, 0xd6, 0x4c, 0x2a, 0xae, 0x0f, 0x21, 0xfb, 0x18, 0x3e, 0xca, 0x1e, 0xf7, 0xe8,
	0x69, 0x95, 0xce, 0x5b, 0x78, 0x92, 0xa6, 0x66, 0x77, 0x74, 0x3b, 0xb7, 0x24, 0xdf, 0xff, 0xf7,
	0xfb, 0xbe, 0x8f, 0x00, 0xe1, 0x56, 0x2b, 0xf9, 0x25, 0x35, 0xbc, 0xb4, 0xe9, 0xa9, 0xd1, 0x56,
	0x17, 0xba, 0x4e, 0x6b, 0x5d, 0x31, 0x77, 0xc1, 0x8b, 0xa1, 0xce, 0xfa, 0x3a, 0xf3, 0xf5, 0x25,
	0x1d, 0xa5, 0x8a, 0xba, 0xdd, 0x58, 0x61, 0x86, 0xd8, 0x32, 0xae, 0xb4, 0xae, 0x6a, 0x31, 0x94,
	0xd7, 0x6d, 0x99, 0x5a, 0xa9, 0xc4, 0xc6, 0x72, 0x75, 0xfa, 0x37, 0xb0, 0xa8, 0x74, 0xa5, 0xdd,
	0x31, 0xed, 0x4f, 0xc3, 0x2b, 0xfd, 0x36, 0x81, 0x79, 0xce, 0x4b, 0xfb, 0x4e, 0x57, 0xaf, 0x1a,
	0x6b, 0xce, 0xf0, 0x11, 0x4c, 0xad, 0x30, 0x2a, 0x42, 0x09, 0x5a, 0x4d, 0xb2, 0xc3, 0xdf, 0x57,
	0xf1, 0xf4, 0x44, 0x18, 0x95, 0xbb, 0x57, 0x9c, 0xc1, 0xdd, 0x6b, 0x6f, 0x74, 0x27, 0x41, 0xab,
	0x7b, 0x4f, 0x96, 0x6c, 0xe8, 0xcc, 0x7c, 0x67, 0x76, 0xe2, 0x13, 0xd9, 0xe1, 0xc5, 0x55, 0x1c,
	0x9c, 0xff, 0x8c, 0x51, 0x7e, 0x83, 0xe1, 0xd7, 0x00, 0xb2, 0x91, 0x56, 0xf2, 0x5a, 0x7e, 0x15,
	0xd1, 0xc4, 0x49, 0x1e, 0xb3, 0xb1, 0xc5, 0xd9, 0xdb, 0xeb, 0x9c, 0x1b, 0xee, 0x4d, 0x90, 0xef,
	0xa0, 0xf8, 0x18, 0xee, 0x17, 0xba, 0x29, 0x65, 0xd5, 0x1a, 0x6e, 0xa5, 0x6e, 0xa2, 0xa9, 0x73,
	0xad, 0xc6, 0x5d, 0x2f, 0x77, 0xa3, 0x5e, 0xf7, 0xaf, 0x00, 0xbf, 0x80, 0x59, 0xa1, 0x95, 0xe2,
	0xcd, 0xc7, 0x28, 0x74, 0x2e, 0xba, 0xcf, 0xe5, 0x42, 0xde, 0xe2, 0x21, 0xfc, 0x0c, 0xc2, 0x4f,
	0xad, 0x30, 0x67, 0xd1, 0x81, 0xa3, 0x93, 0x71, 0xfa, 0x43, 0x1f, 0xf1, 0xec, 0x00, 0x64, 0x33,
	0x08, 0x45, 0xff, 0x42, 0x1f, 0xc2, 0x83, 0xff, 0xb6, 0xa6, 0xc7, 0x80, 0x6f, 0x0f, 0x8f, 0x9f,
	0xc3, 0x4c, 0x09, 0xb5, 0x16, 0x66, 0x13, 0xa1, 0x64, 0xb2, 0xbf, 0x5b, 0xff, 0xbb, 0xef, 0x5d,
	0x30, 0xf7, 0x00, 0x7d, 0x04, 0xf3, 0xdd, 0x15, 0xf0, 0x02, 0xc2, 0xcf, 0xbc, 0x6e, 0x85, 0xfb,
	0xf5, 0x79, 0x3e, 0x5c, 0x28, 0x05, 0xb8, 0x19, 0x75, 0x3c, 0x93, 0x1d, 0x7d, 0xef, 0x08, 0xba,
	0xe8, 0x08, 0xba, 0xec, 0x08, 0xfa, 0xd5, 0x11, 0x74, 0xbe, 0x25, 0xc1, 0xe5, 0x96, 0x04, 0x3f,
	0xb6, 0x24, 0x58, 0x1f, 0xb8, 0x29, 0x9e, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x93, 0x51, 0x32,
	0xef, 0xf7, 0x02, 0x00, 0x00,
}

func (this *RaftLogEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftLogEntry)
	if !ok {
		that2, ok := that.(RaftLogEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Term != that1.Term {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if that1.Entry == nil {
		if this.Entry != nil {
			return false
		}
	} else if this.Entry == nil {
		return false
	} else if !this.Entry.Equal(that1.Entry) {
		return false
	}
	return true
}
func (this *RaftLogEntry_Initialize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftLogEntry_Initialize)
	if !ok {
		that2, ok := that.(RaftLogEntry_Initialize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Initialize.Equal(that1.Initialize) {
		return false
	}
	return true
}
func (this *RaftLogEntry_Configuration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftLogEntry_Configuration)
	if !ok {
		that2, ok := that.(RaftLogEntry_Configuration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Configuration.Equal(that1.Configuration) {
		return false
	}
	return true
}
func (this *RaftLogEntry_Command) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftLogEntry_Command)
	if !ok {
		that2, ok := that.(RaftLogEntry_Command)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Command.Equal(that1.Command) {
		return false
	}
	return true
}
func (this *RaftLogEntry_Query) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftLogEntry_Query)
	if !ok {
		that2, ok := that.(RaftLogEntry_Query)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	return true
}
func (this *InitializeEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitializeEntry)
	if !ok {
		that2, ok := that.(InitializeEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ConfigurationEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigurationEntry)
	if !ok {
		that2, ok := that.(ConfigurationEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *CommandEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommandEntry)
	if !ok {
		that2, ok := that.(CommandEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *QueryEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryEntry)
	if !ok {
		that2, ok := that.(QueryEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (m *RaftLogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLogEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftLogEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		{
			size := m.Entry.Size()
			i -= size
			if _, err := m.Entry.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLog(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if m.Term != 0 {
		i = encodeVarintLog(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RaftLogEntry_Initialize) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *RaftLogEntry_Initialize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Initialize != nil {
		{
			size, err := m.Initialize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RaftLogEntry_Configuration) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *RaftLogEntry_Configuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RaftLogEntry_Command) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *RaftLogEntry_Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RaftLogEntry_Query) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *RaftLogEntry_Query) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *InitializeEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitializeEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitializeEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConfigurationEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigurationEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CommandEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintLog(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintLog(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLog(dAtA []byte, offset int, v uint64) int {
	offset -= sovLog(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RaftLogEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovLog(uint64(m.Term))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovLog(uint64(l))
	if m.Entry != nil {
		n += m.Entry.Size()
	}
	return n
}

func (m *RaftLogEntry_Initialize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Initialize != nil {
		l = m.Initialize.Size()
		n += 1 + l + sovLog(uint64(l))
	}
	return n
}
func (m *RaftLogEntry_Configuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovLog(uint64(l))
	}
	return n
}
func (m *RaftLogEntry_Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovLog(uint64(l))
	}
	return n
}
func (m *RaftLogEntry_Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovLog(uint64(l))
	}
	return n
}
func (m *InitializeEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConfigurationEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovLog(uint64(l))
		}
	}
	return n
}

func (m *CommandEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovLog(uint64(l))
	}
	return n
}

func (m *QueryEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovLog(uint64(l))
	}
	return n
}

func sovLog(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLog(x uint64) (n int) {
	return sovLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftLogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= Term(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initialize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InitializeEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entry = &RaftLogEntry_Initialize{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConfigurationEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entry = &RaftLogEntry_Configuration{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommandEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entry = &RaftLogEntry_Command{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entry = &RaftLogEntry_Query{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitializeEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitializeEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitializeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigurationEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &RaftMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLog
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLog(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLog
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLog   = fmt.Errorf("proto: integer overflow")
)
