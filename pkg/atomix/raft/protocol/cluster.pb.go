// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/raft/protocol/cluster.proto

package protocol

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Member_Type int32

const (
	Member_INACTIVE   Member_Type = 0
	Member_PASSIVE    Member_Type = 1
	Member_PROMOTABLE Member_Type = 2
	Member_ACTIVE     Member_Type = 3
)

var Member_Type_name = map[int32]string{
	0: "INACTIVE",
	1: "PASSIVE",
	2: "PROMOTABLE",
	3: "ACTIVE",
}

var Member_Type_value = map[string]int32{
	"INACTIVE":   0,
	"PASSIVE":    1,
	"PROMOTABLE": 2,
	"ACTIVE":     3,
}

func (x Member_Type) String() string {
	return proto.EnumName(Member_Type_name, int32(x))
}

func (Member_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3fc94cd882917355, []int{0, 0}
}

type Member struct {
	MemberID MemberID    `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3,casttype=MemberID" json:"member_id,omitempty"`
	Type     Member_Type `protobuf:"varint,2,opt,name=type,proto3,enum=atomix.raft.protocol.Member_Type" json:"type,omitempty"`
	Updated  time.Time   `protobuf:"bytes,3,opt,name=updated,proto3,stdtime" json:"updated"`
}

func (m *Member) Reset()         { *m = Member{} }
func (m *Member) String() string { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc94cd882917355, []int{0}
}
func (m *Member) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Member.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(m, src)
}
func (m *Member) XXX_Size() int {
	return m.Size()
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (m *Member) GetMemberID() MemberID {
	if m != nil {
		return m.MemberID
	}
	return ""
}

func (m *Member) GetType() Member_Type {
	if m != nil {
		return m.Type
	}
	return Member_INACTIVE
}

func (m *Member) GetUpdated() time.Time {
	if m != nil {
		return m.Updated
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("atomix.raft.protocol.Member_Type", Member_Type_name, Member_Type_value)
	proto.RegisterType((*Member)(nil), "atomix.raft.protocol.Member")
}

func init() { proto.RegisterFile("atomix/raft/protocol/cluster.proto", fileDescriptor_3fc94cd882917355) }

var fileDescriptor_3fc94cd882917355 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0xb1, 0x6a, 0xc2, 0x40,
	0x18, 0xc7, 0xf3, 0xa9, 0x68, 0x3c, 0x8b, 0xc8, 0xe1, 0x10, 0x1c, 0x2e, 0x56, 0x3a, 0x38, 0x5d,
	0xc0, 0xe2, 0xd8, 0x82, 0x69, 0x1d, 0x02, 0xb5, 0x4a, 0x0c, 0x5d, 0x4b, 0x34, 0x67, 0x10, 0x0c,
	0x17, 0xe2, 0x09, 0xf5, 0x2d, 0x7c, 0x8c, 0x3e, 0x42, 0x1f, 0xc1, 0xd1, 0xb1, 0x93, 0x6d, 0xcf,
	0x67, 0x28, 0x94, 0x4e, 0x25, 0xb9, 0x06, 0x3a, 0x74, 0xfb, 0xdd, 0x77, 0xbf, 0xff, 0xc7, 0xf7,
	0x47, 0x1d, 0x5f, 0xf0, 0x68, 0xf9, 0x64, 0x25, 0xfe, 0x42, 0x58, 0x71, 0xc2, 0x05, 0x9f, 0xf3,
	0x95, 0x35, 0x5f, 0x6d, 0xd6, 0x82, 0x25, 0x34, 0x1b, 0xe0, 0xa6, 0x72, 0x68, 0xea, 0xd0, 0xdc,
	0x69, 0x99, 0x21, 0xe7, 0xe1, 0x8a, 0xa9, 0xd0, 0x6c, 0xb3, 0xb0, 0xc4, 0x32, 0x62, 0x6b, 0xe1,
	0x47, 0xb1, 0x72, 0x5a, 0xcd, 0x90, 0x87, 0x3c, 0x43, 0x2b, 0x25, 0x35, 0xed, 0x7c, 0x02, 0x2a,
	0x8f, 0x58, 0x34, 0x63, 0x09, 0xee, 0xa3, 0x6a, 0x94, 0xd1, 0xe3, 0x32, 0x30, 0xa0, 0x0d, 0xdd,
	0xaa, 0x6d, 0xc8, 0xa3, 0xa9, 0xab, 0x6f, 0xe7, 0xf6, 0xfb, 0x0f, 0xbb, 0xba, 0x52, 0x9d, 0x00,
	0xf7, 0x51, 0x49, 0x6c, 0x63, 0x66, 0x14, 0xda, 0xd0, 0xad, 0xf7, 0xce, 0xe9, 0x7f, 0xd7, 0x51,
	0x95, 0xa3, 0xde, 0x36, 0x66, 0x6e, 0xa6, 0xe3, 0x6b, 0x54, 0xd9, 0xc4, 0x81, 0x2f, 0x58, 0x60,
	0x14, 0xdb, 0xd0, 0xad, 0xf5, 0x5a, 0x54, 0x35, 0xa0, 0x79, 0x03, 0xea, 0xe5, 0x0d, 0x6c, 0x7d,
	0x7f, 0x34, 0xb5, 0xdd, 0x9b, 0x09, 0x6e, 0x1e, 0xea, 0x5c, 0xa1, 0x52, 0xba, 0x0d, 0x9f, 0x21,
	0xdd, 0xb9, 0x1f, 0xdc, 0x78, 0xce, 0xc3, 0xb0, 0xa1, 0xe1, 0x1a, 0xaa, 0x4c, 0x06, 0xd3, 0x69,
	0xfa, 0x00, 0x5c, 0x47, 0x68, 0xe2, 0x8e, 0x47, 0x63, 0x6f, 0x60, 0xdf, 0x0d, 0x1b, 0x05, 0x8c,
	0x50, 0xf9, 0x57, 0x2c, 0xda, 0x17, 0x5f, 0x1f, 0x04, 0x9e, 0x25, 0x81, 0x17, 0x49, 0x60, 0x2f,
	0x09, 0x1c, 0x24, 0x81, 0x77, 0x49, 0x60, 0x77, 0x22, 0xda, 0xe1, 0x44, 0xb4, 0xd7, 0x13, 0xd1,
	0x66, 0xe5, 0xec, 0x96, 0xcb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x42, 0xf8, 0xfe, 0x97,
	0x01, 0x00, 0x00,
}

func (this *Member) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Member)
	if !ok {
		that2, ok := that.(Member)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MemberID != that1.MemberID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Updated.Equal(that1.Updated) {
		return false
	}
	return true
}
func (m *Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Member) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Member) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Updated, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintCluster(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.Type != 0 {
		i = encodeVarintCluster(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MemberID) > 0 {
		i -= len(m.MemberID)
		copy(dAtA[i:], m.MemberID)
		i = encodeVarintCluster(dAtA, i, uint64(len(m.MemberID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCluster(dAtA []byte, offset int, v uint64) int {
	offset -= sovCluster(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedMember(r randyCluster, easy bool) *Member {
	this := &Member{}
	this.MemberID = MemberID(randStringCluster(r))
	this.Type = Member_Type([]int32{0, 1, 2, 3}[r.Intn(4)])
	v1 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Updated = *v1
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyCluster interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCluster(r randyCluster) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCluster(r randyCluster) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneCluster(r)
	}
	return string(tmps)
}
func randUnrecognizedCluster(r randyCluster, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldCluster(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldCluster(dAtA []byte, r randyCluster, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateCluster(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateCluster(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateCluster(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateCluster(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateCluster(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateCluster(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateCluster(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Member) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberID)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCluster(uint64(m.Type))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated)
	n += 1 + l + sovCluster(uint64(l))
	return n
}

func sovCluster(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCluster(x uint64) (n int) {
	return sovCluster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberID = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Member_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Updated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCluster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCluster
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCluster
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCluster
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCluster(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCluster
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCluster = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCluster   = fmt.Errorf("proto: integer overflow")
)
