// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/raft/protocol/cluster.proto

package protocol

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RaftMember_Type int32

const (
	RaftMember_INACTIVE   RaftMember_Type = 0
	RaftMember_PASSIVE    RaftMember_Type = 1
	RaftMember_PROMOTABLE RaftMember_Type = 2
	RaftMember_ACTIVE     RaftMember_Type = 3
)

var RaftMember_Type_name = map[int32]string{
	0: "INACTIVE",
	1: "PASSIVE",
	2: "PROMOTABLE",
	3: "ACTIVE",
}

var RaftMember_Type_value = map[string]int32{
	"INACTIVE":   0,
	"PASSIVE":    1,
	"PROMOTABLE": 2,
	"ACTIVE":     3,
}

func (x RaftMember_Type) String() string {
	return proto.EnumName(RaftMember_Type_name, int32(x))
}

func (RaftMember_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3fc94cd882917355, []int{0, 0}
}

type RaftMember struct {
	MemberID MemberID        `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3,casttype=MemberID" json:"member_id,omitempty"`
	Type     RaftMember_Type `protobuf:"varint,2,opt,name=type,proto3,enum=atomix.raft.protocol.RaftMember_Type" json:"type,omitempty"`
	Updated  time.Time       `protobuf:"bytes,3,opt,name=updated,proto3,stdtime" json:"updated"`
}

func (m *RaftMember) Reset()         { *m = RaftMember{} }
func (m *RaftMember) String() string { return proto.CompactTextString(m) }
func (*RaftMember) ProtoMessage()    {}
func (*RaftMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fc94cd882917355, []int{0}
}
func (m *RaftMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftMember.Merge(m, src)
}
func (m *RaftMember) XXX_Size() int {
	return m.Size()
}
func (m *RaftMember) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftMember.DiscardUnknown(m)
}

var xxx_messageInfo_RaftMember proto.InternalMessageInfo

func (m *RaftMember) GetMemberID() MemberID {
	if m != nil {
		return m.MemberID
	}
	return ""
}

func (m *RaftMember) GetType() RaftMember_Type {
	if m != nil {
		return m.Type
	}
	return RaftMember_INACTIVE
}

func (m *RaftMember) GetUpdated() time.Time {
	if m != nil {
		return m.Updated
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("atomix.raft.protocol.RaftMember_Type", RaftMember_Type_name, RaftMember_Type_value)
	proto.RegisterType((*RaftMember)(nil), "atomix.raft.protocol.RaftMember")
}

func init() { proto.RegisterFile("atomix/raft/protocol/cluster.proto", fileDescriptor_3fc94cd882917355) }

var fileDescriptor_3fc94cd882917355 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0xc1, 0x6a, 0xc2, 0x30,
	0x18, 0xc7, 0x1b, 0x15, 0xad, 0x9f, 0x43, 0x24, 0x78, 0x28, 0x32, 0x52, 0x11, 0x06, 0x9e, 0x52,
	0x70, 0xec, 0xb0, 0xc3, 0x06, 0x76, 0xf3, 0x50, 0x98, 0x53, 0x6a, 0xd9, 0x75, 0x54, 0x1b, 0x8b,
	0xd0, 0x92, 0x52, 0x53, 0x98, 0x6f, 0xe1, 0x63, 0xec, 0x51, 0x3c, 0x7a, 0xdc, 0xc9, 0x8d, 0xf6,
	0x2d, 0x06, 0x83, 0xd1, 0x66, 0x65, 0x3b, 0xec, 0xf6, 0xcb, 0x97, 0xdf, 0x3f, 0xf9, 0xfe, 0x30,
	0x70, 0x05, 0x0f, 0x37, 0x2f, 0x46, 0xec, 0xae, 0x85, 0x11, 0xc5, 0x5c, 0xf0, 0x15, 0x0f, 0x8c,
	0x55, 0x90, 0x6c, 0x05, 0x8b, 0x69, 0x31, 0xc0, 0x5d, 0xe9, 0xd0, 0xdc, 0xa1, 0xa5, 0xd3, 0xd3,
	0x7d, 0xce, 0xfd, 0x80, 0xc9, 0xd0, 0x32, 0x59, 0x1b, 0x62, 0x13, 0xb2, 0xad, 0x70, 0xc3, 0x48,
	0x3a, 0xbd, 0xae, 0xcf, 0x7d, 0x5e, 0xa0, 0x91, 0x93, 0x9c, 0x0e, 0xbe, 0x10, 0x80, 0xed, 0xae,
	0xc5, 0x94, 0x85, 0x4b, 0x16, 0xe3, 0x2b, 0x68, 0x86, 0x05, 0x3d, 0x6f, 0x3c, 0x0d, 0xf5, 0xd1,
	0xb0, 0x69, 0x6a, 0xe9, 0x49, 0x57, 0xe5, 0xb5, 0x75, 0xff, 0xf9, 0x87, 0x6d, 0x55, 0xaa, 0x96,
	0x87, 0xaf, 0xa1, 0x26, 0x76, 0x11, 0xd3, 0x2a, 0x7d, 0x34, 0x6c, 0x8f, 0x2e, 0xe8, 0x7f, 0x1b,
	0xd2, 0xdf, 0x6f, 0xa8, 0xb3, 0x8b, 0x98, 0x5d, 0x44, 0xf0, 0x2d, 0x34, 0x92, 0xc8, 0x73, 0x05,
	0xf3, 0xb4, 0x6a, 0x1f, 0x0d, 0x5b, 0xa3, 0x1e, 0x95, 0x4d, 0x68, 0xd9, 0x84, 0x3a, 0x65, 0x13,
	0x53, 0x3d, 0x9c, 0x74, 0x65, 0xff, 0xae, 0x23, 0xbb, 0x0c, 0x0d, 0x6e, 0xa0, 0x96, 0xbf, 0x86,
	0xcf, 0x40, 0xb5, 0x1e, 0xc7, 0x77, 0x8e, 0xf5, 0x34, 0xe9, 0x28, 0xb8, 0x05, 0x8d, 0xf9, 0x78,
	0xb1, 0xc8, 0x0f, 0x08, 0xb7, 0x01, 0xe6, 0xf6, 0x6c, 0x3a, 0x73, 0xc6, 0xe6, 0xc3, 0xa4, 0x53,
	0xc1, 0x00, 0xf5, 0x1f, 0xb1, 0x6a, 0x9e, 0xbf, 0xa6, 0x04, 0x1d, 0x52, 0x82, 0x8e, 0x29, 0x41,
	0x1f, 0x29, 0x41, 0xfb, 0x8c, 0x28, 0xc7, 0x8c, 0x28, 0x6f, 0x19, 0x51, 0x96, 0xf5, 0x62, 0x87,
	0xcb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0xdc, 0xa2, 0xb0, 0x97, 0x01, 0x00, 0x00,
}

func (this *RaftMember) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftMember)
	if !ok {
		that2, ok := that.(RaftMember)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MemberID != that1.MemberID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Updated.Equal(that1.Updated) {
		return false
	}
	return true
}
func (m *RaftMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Updated, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintCluster(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.Type != 0 {
		i = encodeVarintCluster(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MemberID) > 0 {
		i -= len(m.MemberID)
		copy(dAtA[i:], m.MemberID)
		i = encodeVarintCluster(dAtA, i, uint64(len(m.MemberID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCluster(dAtA []byte, offset int, v uint64) int {
	offset -= sovCluster(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RaftMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberID)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCluster(uint64(m.Type))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated)
	n += 1 + l + sovCluster(uint64(l))
	return n
}

func sovCluster(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCluster(x uint64) (n int) {
	return sovCluster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberID = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RaftMember_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Updated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCluster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCluster
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCluster
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCluster
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCluster(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCluster
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCluster = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCluster   = fmt.Errorf("proto: integer overflow")
)
